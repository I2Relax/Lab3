
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b8c  08002b8c  00012b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bac  08002bac  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002bac  08002bac  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bac  08002bac  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bac  08002bac  00012bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000058  08002c0c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002c0c  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fe2  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000198c  00000000  00000000  00029063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002a9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002b418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168ab  00000000  00000000  0002bd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abb5  00000000  00000000  000425eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082181  00000000  00000000  0004d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf321  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000283c  00000000  00000000  000cf374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b74 	.word	0x08002b74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002b74 	.word	0x08002b74

0800014c <subKeyProcess>:

int TimeOutForKeyPress_SEL = 200;
int TimeOutForKeyPress_MOD = 200;
int TimeOutForKeyPress_SET = 200;

void subKeyProcess() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (KeyReg3_SEL == PRESSED_STATE) {
 8000150:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <subKeyProcess+0x38>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d102      	bne.n	800015e <subKeyProcess+0x12>
		button_SEL_flag=1;
 8000158:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <subKeyProcess+0x3c>)
 800015a:	2201      	movs	r2, #1
 800015c:	601a      	str	r2, [r3, #0]
	}
	if (KeyReg3_MOD == PRESSED_STATE) {
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <subKeyProcess+0x40>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d102      	bne.n	800016c <subKeyProcess+0x20>
		button_MOD_flag=1;
 8000166:	4b0a      	ldr	r3, [pc, #40]	; (8000190 <subKeyProcess+0x44>)
 8000168:	2201      	movs	r2, #1
 800016a:	601a      	str	r2, [r3, #0]
	}
	if (KeyReg3_SET == PRESSED_STATE) {
 800016c:	4b09      	ldr	r3, [pc, #36]	; (8000194 <subKeyProcess+0x48>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	2b00      	cmp	r3, #0
 8000172:	d102      	bne.n	800017a <subKeyProcess+0x2e>
		button_SET_flag=1;
 8000174:	4b08      	ldr	r3, [pc, #32]	; (8000198 <subKeyProcess+0x4c>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
	}
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000000c 	.word	0x2000000c
 8000188:	20000074 	.word	0x20000074
 800018c:	2000001c 	.word	0x2000001c
 8000190:	20000078 	.word	0x20000078
 8000194:	2000002c 	.word	0x2000002c
 8000198:	2000007c 	.word	0x2000007c

0800019c <getKeyInput>:
void getKeyInput(){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	//Chong rung va nhan de cho button SELECT
	KeyReg0_SEL = KeyReg1_SEL;
 80001a0:	4b5c      	ldr	r3, [pc, #368]	; (8000314 <getKeyInput+0x178>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a5c      	ldr	r2, [pc, #368]	; (8000318 <getKeyInput+0x17c>)
 80001a6:	6013      	str	r3, [r2, #0]
	KeyReg1_SEL = KeyReg2_SEL;
 80001a8:	4b5c      	ldr	r3, [pc, #368]	; (800031c <getKeyInput+0x180>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a59      	ldr	r2, [pc, #356]	; (8000314 <getKeyInput+0x178>)
 80001ae:	6013      	str	r3, [r2, #0]
	KeyReg2_SEL = HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin);
 80001b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b4:	485a      	ldr	r0, [pc, #360]	; (8000320 <getKeyInput+0x184>)
 80001b6:	f001 fc9d 	bl	8001af4 <HAL_GPIO_ReadPin>
 80001ba:	4603      	mov	r3, r0
 80001bc:	461a      	mov	r2, r3
 80001be:	4b57      	ldr	r3, [pc, #348]	; (800031c <getKeyInput+0x180>)
 80001c0:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_SEL == KeyReg1_SEL) && (KeyReg1_SEL == KeyReg2_SEL)) {
 80001c2:	4b55      	ldr	r3, [pc, #340]	; (8000318 <getKeyInput+0x17c>)
 80001c4:	681a      	ldr	r2, [r3, #0]
 80001c6:	4b53      	ldr	r3, [pc, #332]	; (8000314 <getKeyInput+0x178>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	429a      	cmp	r2, r3
 80001cc:	d125      	bne.n	800021a <getKeyInput+0x7e>
 80001ce:	4b51      	ldr	r3, [pc, #324]	; (8000314 <getKeyInput+0x178>)
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	4b52      	ldr	r3, [pc, #328]	; (800031c <getKeyInput+0x180>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	d11f      	bne.n	800021a <getKeyInput+0x7e>
		if (KeyReg3_SEL != KeyReg2_SEL) {
 80001da:	4b52      	ldr	r3, [pc, #328]	; (8000324 <getKeyInput+0x188>)
 80001dc:	681a      	ldr	r2, [r3, #0]
 80001de:	4b4f      	ldr	r3, [pc, #316]	; (800031c <getKeyInput+0x180>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	429a      	cmp	r2, r3
 80001e4:	d00d      	beq.n	8000202 <getKeyInput+0x66>
		  KeyReg3_SEL = KeyReg2_SEL;
 80001e6:	4b4d      	ldr	r3, [pc, #308]	; (800031c <getKeyInput+0x180>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a4e      	ldr	r2, [pc, #312]	; (8000324 <getKeyInput+0x188>)
 80001ec:	6013      	str	r3, [r2, #0]
		  if (KeyReg3_SEL == PRESSED_STATE){
 80001ee:	4b4d      	ldr	r3, [pc, #308]	; (8000324 <getKeyInput+0x188>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d111      	bne.n	800021a <getKeyInput+0x7e>
			TimeOutForKeyPress_SEL=200;
 80001f6:	4b4c      	ldr	r3, [pc, #304]	; (8000328 <getKeyInput+0x18c>)
 80001f8:	22c8      	movs	r2, #200	; 0xc8
 80001fa:	601a      	str	r2, [r3, #0]
			subKeyProcess();
 80001fc:	f7ff ffa6 	bl	800014c <subKeyProcess>
 8000200:	e00b      	b.n	800021a <getKeyInput+0x7e>
		  }
		}
		else {
		   TimeOutForKeyPress_SEL--;
 8000202:	4b49      	ldr	r3, [pc, #292]	; (8000328 <getKeyInput+0x18c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	3b01      	subs	r3, #1
 8000208:	4a47      	ldr	r2, [pc, #284]	; (8000328 <getKeyInput+0x18c>)
 800020a:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress_SEL == 0){
 800020c:	4b46      	ldr	r3, [pc, #280]	; (8000328 <getKeyInput+0x18c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d102      	bne.n	800021a <getKeyInput+0x7e>
			  KeyReg3_SEL = NORMAL_STATE;
 8000214:	4b43      	ldr	r3, [pc, #268]	; (8000324 <getKeyInput+0x188>)
 8000216:	2201      	movs	r2, #1
 8000218:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//Chong rung va nhan de cho button MOD
    KeyReg0_MOD = KeyReg1_MOD;
 800021a:	4b44      	ldr	r3, [pc, #272]	; (800032c <getKeyInput+0x190>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a44      	ldr	r2, [pc, #272]	; (8000330 <getKeyInput+0x194>)
 8000220:	6013      	str	r3, [r2, #0]
    KeyReg1_MOD = KeyReg2_MOD;
 8000222:	4b44      	ldr	r3, [pc, #272]	; (8000334 <getKeyInput+0x198>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a41      	ldr	r2, [pc, #260]	; (800032c <getKeyInput+0x190>)
 8000228:	6013      	str	r3, [r2, #0]
    KeyReg2_MOD = HAL_GPIO_ReadPin(MOD_GPIO_Port, MOD_Pin);
 800022a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022e:	483c      	ldr	r0, [pc, #240]	; (8000320 <getKeyInput+0x184>)
 8000230:	f001 fc60 	bl	8001af4 <HAL_GPIO_ReadPin>
 8000234:	4603      	mov	r3, r0
 8000236:	461a      	mov	r2, r3
 8000238:	4b3e      	ldr	r3, [pc, #248]	; (8000334 <getKeyInput+0x198>)
 800023a:	601a      	str	r2, [r3, #0]
    if ((KeyReg0_MOD == KeyReg1_MOD) && (KeyReg1_MOD == KeyReg2_MOD)) {
 800023c:	4b3c      	ldr	r3, [pc, #240]	; (8000330 <getKeyInput+0x194>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	4b3a      	ldr	r3, [pc, #232]	; (800032c <getKeyInput+0x190>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	429a      	cmp	r2, r3
 8000246:	d125      	bne.n	8000294 <getKeyInput+0xf8>
 8000248:	4b38      	ldr	r3, [pc, #224]	; (800032c <getKeyInput+0x190>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b39      	ldr	r3, [pc, #228]	; (8000334 <getKeyInput+0x198>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	429a      	cmp	r2, r3
 8000252:	d11f      	bne.n	8000294 <getKeyInput+0xf8>
      if (KeyReg3_MOD != KeyReg2_MOD) {
 8000254:	4b38      	ldr	r3, [pc, #224]	; (8000338 <getKeyInput+0x19c>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b36      	ldr	r3, [pc, #216]	; (8000334 <getKeyInput+0x198>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	429a      	cmp	r2, r3
 800025e:	d00d      	beq.n	800027c <getKeyInput+0xe0>
        KeyReg3_MOD = KeyReg2_MOD;
 8000260:	4b34      	ldr	r3, [pc, #208]	; (8000334 <getKeyInput+0x198>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a34      	ldr	r2, [pc, #208]	; (8000338 <getKeyInput+0x19c>)
 8000266:	6013      	str	r3, [r2, #0]
        if (KeyReg3_MOD == PRESSED_STATE){
 8000268:	4b33      	ldr	r3, [pc, #204]	; (8000338 <getKeyInput+0x19c>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d111      	bne.n	8000294 <getKeyInput+0xf8>
          TimeOutForKeyPress_MOD=200;
 8000270:	4b32      	ldr	r3, [pc, #200]	; (800033c <getKeyInput+0x1a0>)
 8000272:	22c8      	movs	r2, #200	; 0xc8
 8000274:	601a      	str	r2, [r3, #0]
          subKeyProcess();
 8000276:	f7ff ff69 	bl	800014c <subKeyProcess>
 800027a:	e00b      	b.n	8000294 <getKeyInput+0xf8>
        }
      }
      else {
         TimeOutForKeyPress_MOD--;
 800027c:	4b2f      	ldr	r3, [pc, #188]	; (800033c <getKeyInput+0x1a0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	3b01      	subs	r3, #1
 8000282:	4a2e      	ldr	r2, [pc, #184]	; (800033c <getKeyInput+0x1a0>)
 8000284:	6013      	str	r3, [r2, #0]
          if (TimeOutForKeyPress_MOD == 0){
 8000286:	4b2d      	ldr	r3, [pc, #180]	; (800033c <getKeyInput+0x1a0>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d102      	bne.n	8000294 <getKeyInput+0xf8>
        	  KeyReg3_MOD = NORMAL_STATE;
 800028e:	4b2a      	ldr	r3, [pc, #168]	; (8000338 <getKeyInput+0x19c>)
 8000290:	2201      	movs	r2, #1
 8000292:	601a      	str	r2, [r3, #0]
          }
      }
    }
	//Chong rung va nhan de cho button SET
    KeyReg0_SET = KeyReg1_SET;
 8000294:	4b2a      	ldr	r3, [pc, #168]	; (8000340 <getKeyInput+0x1a4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a2a      	ldr	r2, [pc, #168]	; (8000344 <getKeyInput+0x1a8>)
 800029a:	6013      	str	r3, [r2, #0]
	KeyReg1_SET = KeyReg2_SET;
 800029c:	4b2a      	ldr	r3, [pc, #168]	; (8000348 <getKeyInput+0x1ac>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a27      	ldr	r2, [pc, #156]	; (8000340 <getKeyInput+0x1a4>)
 80002a2:	6013      	str	r3, [r2, #0]
	KeyReg2_SET = HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin);
 80002a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002a8:	481d      	ldr	r0, [pc, #116]	; (8000320 <getKeyInput+0x184>)
 80002aa:	f001 fc23 	bl	8001af4 <HAL_GPIO_ReadPin>
 80002ae:	4603      	mov	r3, r0
 80002b0:	461a      	mov	r2, r3
 80002b2:	4b25      	ldr	r3, [pc, #148]	; (8000348 <getKeyInput+0x1ac>)
 80002b4:	601a      	str	r2, [r3, #0]
	if ((KeyReg0_SET == KeyReg1_SET) && (KeyReg1_SET == KeyReg2_SET)) {
 80002b6:	4b23      	ldr	r3, [pc, #140]	; (8000344 <getKeyInput+0x1a8>)
 80002b8:	681a      	ldr	r2, [r3, #0]
 80002ba:	4b21      	ldr	r3, [pc, #132]	; (8000340 <getKeyInput+0x1a4>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d125      	bne.n	800030e <getKeyInput+0x172>
 80002c2:	4b1f      	ldr	r3, [pc, #124]	; (8000340 <getKeyInput+0x1a4>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b20      	ldr	r3, [pc, #128]	; (8000348 <getKeyInput+0x1ac>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d11f      	bne.n	800030e <getKeyInput+0x172>
	  if (KeyReg3_SET != KeyReg2_SET) {
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <getKeyInput+0x1b0>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <getKeyInput+0x1ac>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d00d      	beq.n	80002f6 <getKeyInput+0x15a>
		KeyReg3_SET = KeyReg2_SET;
 80002da:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <getKeyInput+0x1ac>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a1b      	ldr	r2, [pc, #108]	; (800034c <getKeyInput+0x1b0>)
 80002e0:	6013      	str	r3, [r2, #0]
		if (KeyReg3_SET == PRESSED_STATE){
 80002e2:	4b1a      	ldr	r3, [pc, #104]	; (800034c <getKeyInput+0x1b0>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d111      	bne.n	800030e <getKeyInput+0x172>
		  TimeOutForKeyPress_SET = 200;
 80002ea:	4b19      	ldr	r3, [pc, #100]	; (8000350 <getKeyInput+0x1b4>)
 80002ec:	22c8      	movs	r2, #200	; 0xc8
 80002ee:	601a      	str	r2, [r3, #0]
		  subKeyProcess();
 80002f0:	f7ff ff2c 	bl	800014c <subKeyProcess>
		  if (TimeOutForKeyPress_SET == 0){
			  KeyReg3_SET = NORMAL_STATE;
		  }
	  }
	}
}
 80002f4:	e00b      	b.n	800030e <getKeyInput+0x172>
		 TimeOutForKeyPress_SET--;
 80002f6:	4b16      	ldr	r3, [pc, #88]	; (8000350 <getKeyInput+0x1b4>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	4a14      	ldr	r2, [pc, #80]	; (8000350 <getKeyInput+0x1b4>)
 80002fe:	6013      	str	r3, [r2, #0]
		  if (TimeOutForKeyPress_SET == 0){
 8000300:	4b13      	ldr	r3, [pc, #76]	; (8000350 <getKeyInput+0x1b4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d102      	bne.n	800030e <getKeyInput+0x172>
			  KeyReg3_SET = NORMAL_STATE;
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <getKeyInput+0x1b0>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]
}
 800030e:	bf00      	nop
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	20000004 	.word	0x20000004
 8000318:	20000000 	.word	0x20000000
 800031c:	20000008 	.word	0x20000008
 8000320:	40011000 	.word	0x40011000
 8000324:	2000000c 	.word	0x2000000c
 8000328:	20000030 	.word	0x20000030
 800032c:	20000014 	.word	0x20000014
 8000330:	20000010 	.word	0x20000010
 8000334:	20000018 	.word	0x20000018
 8000338:	2000001c 	.word	0x2000001c
 800033c:	20000034 	.word	0x20000034
 8000340:	20000024 	.word	0x20000024
 8000344:	20000020 	.word	0x20000020
 8000348:	20000028 	.word	0x20000028
 800034c:	2000002c 	.word	0x2000002c
 8000350:	20000038 	.word	0x20000038

08000354 <display7SEG>:
#include "software_timer.h"

int led_index=4;
int led_buffer[4];

void display7SEG(int num) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	if (num==0) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d122      	bne.n	80003a8 <display7SEG+0x54>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2101      	movs	r1, #1
 8000366:	48bd      	ldr	r0, [pc, #756]	; (800065c <display7SEG+0x308>)
 8000368:	f001 fbdb 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2102      	movs	r1, #2
 8000370:	48ba      	ldr	r0, [pc, #744]	; (800065c <display7SEG+0x308>)
 8000372:	f001 fbd6 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2104      	movs	r1, #4
 800037a:	48b8      	ldr	r0, [pc, #736]	; (800065c <display7SEG+0x308>)
 800037c:	f001 fbd1 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2108      	movs	r1, #8
 8000384:	48b5      	ldr	r0, [pc, #724]	; (800065c <display7SEG+0x308>)
 8000386:	f001 fbcc 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2110      	movs	r1, #16
 800038e:	48b3      	ldr	r0, [pc, #716]	; (800065c <display7SEG+0x308>)
 8000390:	f001 fbc7 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2120      	movs	r1, #32
 8000398:	48b0      	ldr	r0, [pc, #704]	; (800065c <display7SEG+0x308>)
 800039a:	f001 fbc2 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	2140      	movs	r1, #64	; 0x40
 80003a2:	48ae      	ldr	r0, [pc, #696]	; (800065c <display7SEG+0x308>)
 80003a4:	f001 fbbd 	bl	8001b22 <HAL_GPIO_WritePin>
	}
	if (num==1) {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d122      	bne.n	80003f4 <display7SEG+0xa0>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	2101      	movs	r1, #1
 80003b2:	48aa      	ldr	r0, [pc, #680]	; (800065c <display7SEG+0x308>)
 80003b4:	f001 fbb5 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2102      	movs	r1, #2
 80003bc:	48a7      	ldr	r0, [pc, #668]	; (800065c <display7SEG+0x308>)
 80003be:	f001 fbb0 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2104      	movs	r1, #4
 80003c6:	48a5      	ldr	r0, [pc, #660]	; (800065c <display7SEG+0x308>)
 80003c8:	f001 fbab 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2108      	movs	r1, #8
 80003d0:	48a2      	ldr	r0, [pc, #648]	; (800065c <display7SEG+0x308>)
 80003d2:	f001 fba6 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2110      	movs	r1, #16
 80003da:	48a0      	ldr	r0, [pc, #640]	; (800065c <display7SEG+0x308>)
 80003dc:	f001 fba1 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	2120      	movs	r1, #32
 80003e4:	489d      	ldr	r0, [pc, #628]	; (800065c <display7SEG+0x308>)
 80003e6:	f001 fb9c 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	489b      	ldr	r0, [pc, #620]	; (800065c <display7SEG+0x308>)
 80003f0:	f001 fb97 	bl	8001b22 <HAL_GPIO_WritePin>
	}
	if (num==2) {
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	d122      	bne.n	8000440 <display7SEG+0xec>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2101      	movs	r1, #1
 80003fe:	4897      	ldr	r0, [pc, #604]	; (800065c <display7SEG+0x308>)
 8000400:	f001 fb8f 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2102      	movs	r1, #2
 8000408:	4894      	ldr	r0, [pc, #592]	; (800065c <display7SEG+0x308>)
 800040a:	f001 fb8a 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 800040e:	2201      	movs	r2, #1
 8000410:	2104      	movs	r1, #4
 8000412:	4892      	ldr	r0, [pc, #584]	; (800065c <display7SEG+0x308>)
 8000414:	f001 fb85 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2108      	movs	r1, #8
 800041c:	488f      	ldr	r0, [pc, #572]	; (800065c <display7SEG+0x308>)
 800041e:	f001 fb80 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	2110      	movs	r1, #16
 8000426:	488d      	ldr	r0, [pc, #564]	; (800065c <display7SEG+0x308>)
 8000428:	f001 fb7b 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800042c:	2201      	movs	r2, #1
 800042e:	2120      	movs	r1, #32
 8000430:	488a      	ldr	r0, [pc, #552]	; (800065c <display7SEG+0x308>)
 8000432:	f001 fb76 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2140      	movs	r1, #64	; 0x40
 800043a:	4888      	ldr	r0, [pc, #544]	; (800065c <display7SEG+0x308>)
 800043c:	f001 fb71 	bl	8001b22 <HAL_GPIO_WritePin>
	}
	if (num==3) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2b03      	cmp	r3, #3
 8000444:	d122      	bne.n	800048c <display7SEG+0x138>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2101      	movs	r1, #1
 800044a:	4884      	ldr	r0, [pc, #528]	; (800065c <display7SEG+0x308>)
 800044c:	f001 fb69 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2102      	movs	r1, #2
 8000454:	4881      	ldr	r0, [pc, #516]	; (800065c <display7SEG+0x308>)
 8000456:	f001 fb64 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	2104      	movs	r1, #4
 800045e:	487f      	ldr	r0, [pc, #508]	; (800065c <display7SEG+0x308>)
 8000460:	f001 fb5f 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	2108      	movs	r1, #8
 8000468:	487c      	ldr	r0, [pc, #496]	; (800065c <display7SEG+0x308>)
 800046a:	f001 fb5a 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800046e:	2201      	movs	r2, #1
 8000470:	2110      	movs	r1, #16
 8000472:	487a      	ldr	r0, [pc, #488]	; (800065c <display7SEG+0x308>)
 8000474:	f001 fb55 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2120      	movs	r1, #32
 800047c:	4877      	ldr	r0, [pc, #476]	; (800065c <display7SEG+0x308>)
 800047e:	f001 fb50 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2140      	movs	r1, #64	; 0x40
 8000486:	4875      	ldr	r0, [pc, #468]	; (800065c <display7SEG+0x308>)
 8000488:	f001 fb4b 	bl	8001b22 <HAL_GPIO_WritePin>
	}
	if (num==4) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b04      	cmp	r3, #4
 8000490:	d122      	bne.n	80004d8 <display7SEG+0x184>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2101      	movs	r1, #1
 8000496:	4871      	ldr	r0, [pc, #452]	; (800065c <display7SEG+0x308>)
 8000498:	f001 fb43 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2102      	movs	r1, #2
 80004a0:	486e      	ldr	r0, [pc, #440]	; (800065c <display7SEG+0x308>)
 80004a2:	f001 fb3e 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2104      	movs	r1, #4
 80004aa:	486c      	ldr	r0, [pc, #432]	; (800065c <display7SEG+0x308>)
 80004ac:	f001 fb39 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2108      	movs	r1, #8
 80004b4:	4869      	ldr	r0, [pc, #420]	; (800065c <display7SEG+0x308>)
 80004b6:	f001 fb34 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2110      	movs	r1, #16
 80004be:	4867      	ldr	r0, [pc, #412]	; (800065c <display7SEG+0x308>)
 80004c0:	f001 fb2f 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2120      	movs	r1, #32
 80004c8:	4864      	ldr	r0, [pc, #400]	; (800065c <display7SEG+0x308>)
 80004ca:	f001 fb2a 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2140      	movs	r1, #64	; 0x40
 80004d2:	4862      	ldr	r0, [pc, #392]	; (800065c <display7SEG+0x308>)
 80004d4:	f001 fb25 	bl	8001b22 <HAL_GPIO_WritePin>
	}
	if (num==5) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b05      	cmp	r3, #5
 80004dc:	d122      	bne.n	8000524 <display7SEG+0x1d0>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2101      	movs	r1, #1
 80004e2:	485e      	ldr	r0, [pc, #376]	; (800065c <display7SEG+0x308>)
 80004e4:	f001 fb1d 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2102      	movs	r1, #2
 80004ec:	485b      	ldr	r0, [pc, #364]	; (800065c <display7SEG+0x308>)
 80004ee:	f001 fb18 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2104      	movs	r1, #4
 80004f6:	4859      	ldr	r0, [pc, #356]	; (800065c <display7SEG+0x308>)
 80004f8:	f001 fb13 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2108      	movs	r1, #8
 8000500:	4856      	ldr	r0, [pc, #344]	; (800065c <display7SEG+0x308>)
 8000502:	f001 fb0e 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2110      	movs	r1, #16
 800050a:	4854      	ldr	r0, [pc, #336]	; (800065c <display7SEG+0x308>)
 800050c:	f001 fb09 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2120      	movs	r1, #32
 8000514:	4851      	ldr	r0, [pc, #324]	; (800065c <display7SEG+0x308>)
 8000516:	f001 fb04 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2140      	movs	r1, #64	; 0x40
 800051e:	484f      	ldr	r0, [pc, #316]	; (800065c <display7SEG+0x308>)
 8000520:	f001 faff 	bl	8001b22 <HAL_GPIO_WritePin>
	}
	if (num==6) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b06      	cmp	r3, #6
 8000528:	d122      	bne.n	8000570 <display7SEG+0x21c>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2101      	movs	r1, #1
 800052e:	484b      	ldr	r0, [pc, #300]	; (800065c <display7SEG+0x308>)
 8000530:	f001 faf7 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2102      	movs	r1, #2
 8000538:	4848      	ldr	r0, [pc, #288]	; (800065c <display7SEG+0x308>)
 800053a:	f001 faf2 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2104      	movs	r1, #4
 8000542:	4846      	ldr	r0, [pc, #280]	; (800065c <display7SEG+0x308>)
 8000544:	f001 faed 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2108      	movs	r1, #8
 800054c:	4843      	ldr	r0, [pc, #268]	; (800065c <display7SEG+0x308>)
 800054e:	f001 fae8 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2110      	movs	r1, #16
 8000556:	4841      	ldr	r0, [pc, #260]	; (800065c <display7SEG+0x308>)
 8000558:	f001 fae3 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2120      	movs	r1, #32
 8000560:	483e      	ldr	r0, [pc, #248]	; (800065c <display7SEG+0x308>)
 8000562:	f001 fade 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2140      	movs	r1, #64	; 0x40
 800056a:	483c      	ldr	r0, [pc, #240]	; (800065c <display7SEG+0x308>)
 800056c:	f001 fad9 	bl	8001b22 <HAL_GPIO_WritePin>
	}
	if (num==7) {
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b07      	cmp	r3, #7
 8000574:	d122      	bne.n	80005bc <display7SEG+0x268>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2101      	movs	r1, #1
 800057a:	4838      	ldr	r0, [pc, #224]	; (800065c <display7SEG+0x308>)
 800057c:	f001 fad1 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2102      	movs	r1, #2
 8000584:	4835      	ldr	r0, [pc, #212]	; (800065c <display7SEG+0x308>)
 8000586:	f001 facc 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2104      	movs	r1, #4
 800058e:	4833      	ldr	r0, [pc, #204]	; (800065c <display7SEG+0x308>)
 8000590:	f001 fac7 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2108      	movs	r1, #8
 8000598:	4830      	ldr	r0, [pc, #192]	; (800065c <display7SEG+0x308>)
 800059a:	f001 fac2 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2110      	movs	r1, #16
 80005a2:	482e      	ldr	r0, [pc, #184]	; (800065c <display7SEG+0x308>)
 80005a4:	f001 fabd 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2120      	movs	r1, #32
 80005ac:	482b      	ldr	r0, [pc, #172]	; (800065c <display7SEG+0x308>)
 80005ae:	f001 fab8 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2140      	movs	r1, #64	; 0x40
 80005b6:	4829      	ldr	r0, [pc, #164]	; (800065c <display7SEG+0x308>)
 80005b8:	f001 fab3 	bl	8001b22 <HAL_GPIO_WritePin>
	}
	if (num==8) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b08      	cmp	r3, #8
 80005c0:	d122      	bne.n	8000608 <display7SEG+0x2b4>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2101      	movs	r1, #1
 80005c6:	4825      	ldr	r0, [pc, #148]	; (800065c <display7SEG+0x308>)
 80005c8:	f001 faab 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2102      	movs	r1, #2
 80005d0:	4822      	ldr	r0, [pc, #136]	; (800065c <display7SEG+0x308>)
 80005d2:	f001 faa6 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2104      	movs	r1, #4
 80005da:	4820      	ldr	r0, [pc, #128]	; (800065c <display7SEG+0x308>)
 80005dc:	f001 faa1 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2108      	movs	r1, #8
 80005e4:	481d      	ldr	r0, [pc, #116]	; (800065c <display7SEG+0x308>)
 80005e6:	f001 fa9c 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2110      	movs	r1, #16
 80005ee:	481b      	ldr	r0, [pc, #108]	; (800065c <display7SEG+0x308>)
 80005f0:	f001 fa97 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2120      	movs	r1, #32
 80005f8:	4818      	ldr	r0, [pc, #96]	; (800065c <display7SEG+0x308>)
 80005fa:	f001 fa92 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	4816      	ldr	r0, [pc, #88]	; (800065c <display7SEG+0x308>)
 8000604:	f001 fa8d 	bl	8001b22 <HAL_GPIO_WritePin>
	}
	if (num==9) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b09      	cmp	r3, #9
 800060c:	d122      	bne.n	8000654 <display7SEG+0x300>
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2101      	movs	r1, #1
 8000612:	4812      	ldr	r0, [pc, #72]	; (800065c <display7SEG+0x308>)
 8000614:	f001 fa85 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2102      	movs	r1, #2
 800061c:	480f      	ldr	r0, [pc, #60]	; (800065c <display7SEG+0x308>)
 800061e:	f001 fa80 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2104      	movs	r1, #4
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <display7SEG+0x308>)
 8000628:	f001 fa7b 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2108      	movs	r1, #8
 8000630:	480a      	ldr	r0, [pc, #40]	; (800065c <display7SEG+0x308>)
 8000632:	f001 fa76 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2110      	movs	r1, #16
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <display7SEG+0x308>)
 800063c:	f001 fa71 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2120      	movs	r1, #32
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <display7SEG+0x308>)
 8000646:	f001 fa6c 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	4803      	ldr	r0, [pc, #12]	; (800065c <display7SEG+0x308>)
 8000650:	f001 fa67 	bl	8001b22 <HAL_GPIO_WritePin>
	}
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40010c00 	.word	0x40010c00

08000660 <clear7SEG>:

void clear7SEG() {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2101      	movs	r1, #1
 8000668:	4811      	ldr	r0, [pc, #68]	; (80006b0 <clear7SEG+0x50>)
 800066a:	f001 fa5a 	bl	8001b22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2102      	movs	r1, #2
 8000672:	480f      	ldr	r0, [pc, #60]	; (80006b0 <clear7SEG+0x50>)
 8000674:	f001 fa55 	bl	8001b22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2104      	movs	r1, #4
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <clear7SEG+0x50>)
 800067e:	f001 fa50 	bl	8001b22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2108      	movs	r1, #8
 8000686:	480a      	ldr	r0, [pc, #40]	; (80006b0 <clear7SEG+0x50>)
 8000688:	f001 fa4b 	bl	8001b22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2110      	movs	r1, #16
 8000690:	4807      	ldr	r0, [pc, #28]	; (80006b0 <clear7SEG+0x50>)
 8000692:	f001 fa46 	bl	8001b22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2120      	movs	r1, #32
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <clear7SEG+0x50>)
 800069c:	f001 fa41 	bl	8001b22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2140      	movs	r1, #64	; 0x40
 80006a4:	4802      	ldr	r0, [pc, #8]	; (80006b0 <clear7SEG+0x50>)
 80006a6:	f001 fa3c 	bl	8001b22 <HAL_GPIO_WritePin>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40010c00 	.word	0x40010c00

080006b4 <updateledbuffer>:

void updateledbuffer(int num1, int num2) {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	led_buffer[0]=num1/10;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a18      	ldr	r2, [pc, #96]	; (8000724 <updateledbuffer+0x70>)
 80006c2:	fb82 1203 	smull	r1, r2, r2, r3
 80006c6:	1092      	asrs	r2, r2, #2
 80006c8:	17db      	asrs	r3, r3, #31
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	4a16      	ldr	r2, [pc, #88]	; (8000728 <updateledbuffer+0x74>)
 80006ce:	6013      	str	r3, [r2, #0]
	led_buffer[1]=num1%10;
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <updateledbuffer+0x70>)
 80006d4:	fb83 2301 	smull	r2, r3, r3, r1
 80006d8:	109a      	asrs	r2, r3, #2
 80006da:	17cb      	asrs	r3, r1, #31
 80006dc:	1ad2      	subs	r2, r2, r3
 80006de:	4613      	mov	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	1aca      	subs	r2, r1, r3
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <updateledbuffer+0x74>)
 80006ea:	605a      	str	r2, [r3, #4]
	led_buffer[2]=num2/10;
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <updateledbuffer+0x70>)
 80006f0:	fb82 1203 	smull	r1, r2, r2, r3
 80006f4:	1092      	asrs	r2, r2, #2
 80006f6:	17db      	asrs	r3, r3, #31
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <updateledbuffer+0x74>)
 80006fc:	6093      	str	r3, [r2, #8]
	led_buffer[3]=num2%10;
 80006fe:	6839      	ldr	r1, [r7, #0]
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <updateledbuffer+0x70>)
 8000702:	fb83 2301 	smull	r2, r3, r3, r1
 8000706:	109a      	asrs	r2, r3, #2
 8000708:	17cb      	asrs	r3, r1, #31
 800070a:	1ad2      	subs	r2, r2, r3
 800070c:	4613      	mov	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	1aca      	subs	r2, r1, r3
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <updateledbuffer+0x74>)
 8000718:	60da      	str	r2, [r3, #12]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	66666667 	.word	0x66666667
 8000728:	200000b4 	.word	0x200000b4

0800072c <display_led>:
void display_led(int num1_idx, int num2_idx, int duration) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	switch (led_index){
 8000738:	4b66      	ldr	r3, [pc, #408]	; (80008d4 <display_led+0x1a8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b04      	cmp	r3, #4
 800073e:	f200 80bb 	bhi.w	80008b8 <display_led+0x18c>
 8000742:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <display_led+0x1c>)
 8000744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000748:	08000777 	.word	0x08000777
 800074c:	080007c9 	.word	0x080007c9
 8000750:	08000819 	.word	0x08000819
 8000754:	08000869 	.word	0x08000869
 8000758:	0800075d 	.word	0x0800075d
	case 4:
		clear7SEG();
 800075c:	f7ff ff80 	bl	8000660 <clear7SEG>
		updateledbuffer(num1_idx, num2_idx);
 8000760:	68b9      	ldr	r1, [r7, #8]
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f7ff ffa6 	bl	80006b4 <updateledbuffer>
		led_index=0;
 8000768:	4b5a      	ldr	r3, [pc, #360]	; (80008d4 <display_led+0x1a8>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
		setTimer1(duration);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 fcfc 	bl	800116c <setTimer1>
		break;
 8000774:	e0a9      	b.n	80008ca <display_led+0x19e>
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077c:	4856      	ldr	r0, [pc, #344]	; (80008d8 <display_led+0x1ac>)
 800077e:	f001 f9d0 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000788:	4853      	ldr	r0, [pc, #332]	; (80008d8 <display_led+0x1ac>)
 800078a:	f001 f9ca 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000794:	4850      	ldr	r0, [pc, #320]	; (80008d8 <display_led+0x1ac>)
 8000796:	f001 f9c4 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800079a:	2201      	movs	r2, #1
 800079c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007a0:	484d      	ldr	r0, [pc, #308]	; (80008d8 <display_led+0x1ac>)
 80007a2:	f001 f9be 	bl	8001b22 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 80007a6:	4b4d      	ldr	r3, [pc, #308]	; (80008dc <display_led+0x1b0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fdd2 	bl	8000354 <display7SEG>
		if (timer1_flag==1) {
 80007b0:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <display_led+0x1b4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	f040 8081 	bne.w	80008bc <display_led+0x190>
			led_index=1;
 80007ba:	4b46      	ldr	r3, [pc, #280]	; (80008d4 <display_led+0x1a8>)
 80007bc:	2201      	movs	r2, #1
 80007be:	601a      	str	r2, [r3, #0]
			setTimer1(duration);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 fcd3 	bl	800116c <setTimer1>
		}
		break;
 80007c6:	e079      	b.n	80008bc <display_led+0x190>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ce:	4842      	ldr	r0, [pc, #264]	; (80008d8 <display_led+0x1ac>)
 80007d0:	f001 f9a7 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007da:	483f      	ldr	r0, [pc, #252]	; (80008d8 <display_led+0x1ac>)
 80007dc:	f001 f9a1 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e6:	483c      	ldr	r0, [pc, #240]	; (80008d8 <display_led+0x1ac>)
 80007e8:	f001 f99b 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007f2:	4839      	ldr	r0, [pc, #228]	; (80008d8 <display_led+0x1ac>)
 80007f4:	f001 f995 	bl	8001b22 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 80007f8:	4b38      	ldr	r3, [pc, #224]	; (80008dc <display_led+0x1b0>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fda9 	bl	8000354 <display7SEG>
		if (timer1_flag==1) {
 8000802:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <display_led+0x1b4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d15a      	bne.n	80008c0 <display_led+0x194>
			led_index=2;
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <display_led+0x1a8>)
 800080c:	2202      	movs	r2, #2
 800080e:	601a      	str	r2, [r3, #0]
			setTimer1(duration);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f000 fcab 	bl	800116c <setTimer1>
		}
		break;
 8000816:	e053      	b.n	80008c0 <display_led+0x194>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081e:	482e      	ldr	r0, [pc, #184]	; (80008d8 <display_led+0x1ac>)
 8000820:	f001 f97f 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082a:	482b      	ldr	r0, [pc, #172]	; (80008d8 <display_led+0x1ac>)
 800082c:	f001 f979 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000836:	4828      	ldr	r0, [pc, #160]	; (80008d8 <display_led+0x1ac>)
 8000838:	f001 f973 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000842:	4825      	ldr	r0, [pc, #148]	; (80008d8 <display_led+0x1ac>)
 8000844:	f001 f96d 	bl	8001b22 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <display_led+0x1b0>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fd81 	bl	8000354 <display7SEG>
		if (timer1_flag==1) {
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <display_led+0x1b4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d134      	bne.n	80008c4 <display_led+0x198>
			led_index=3;
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <display_led+0x1a8>)
 800085c:	2203      	movs	r2, #3
 800085e:	601a      	str	r2, [r3, #0]
			setTimer1(duration);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 fc83 	bl	800116c <setTimer1>
		}
		break;
 8000866:	e02d      	b.n	80008c4 <display_led+0x198>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086e:	481a      	ldr	r0, [pc, #104]	; (80008d8 <display_led+0x1ac>)
 8000870:	f001 f957 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087a:	4817      	ldr	r0, [pc, #92]	; (80008d8 <display_led+0x1ac>)
 800087c:	f001 f951 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <display_led+0x1ac>)
 8000888:	f001 f94b 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <display_led+0x1ac>)
 8000894:	f001 f945 	bl	8001b22 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <display_led+0x1b0>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd59 	bl	8000354 <display7SEG>
		if (timer1_flag==1) {
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <display_led+0x1b4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10e      	bne.n	80008c8 <display_led+0x19c>
			led_index=0;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <display_led+0x1a8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
			setTimer1(duration);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 fc5b 	bl	800116c <setTimer1>
		}
		break;
 80008b6:	e007      	b.n	80008c8 <display_led+0x19c>
	default:
		break;
 80008b8:	bf00      	nop
 80008ba:	e006      	b.n	80008ca <display_led+0x19e>
		break;
 80008bc:	bf00      	nop
 80008be:	e004      	b.n	80008ca <display_led+0x19e>
		break;
 80008c0:	bf00      	nop
 80008c2:	e002      	b.n	80008ca <display_led+0x19e>
		break;
 80008c4:	bf00      	nop
 80008c6:	e000      	b.n	80008ca <display_led+0x19e>
		break;
 80008c8:	bf00      	nop
	}
}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000003c 	.word	0x2000003c
 80008d8:	40010800 	.word	0x40010800
 80008dc:	200000b4 	.word	0x200000b4
 80008e0:	20000084 	.word	0x20000084

080008e4 <clear_led>:
void clear_led() {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2110      	movs	r1, #16
 80008ec:	480f      	ldr	r0, [pc, #60]	; (800092c <clear_led+0x48>)
 80008ee:	f001 f918 	bl	8001b22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2120      	movs	r1, #32
 80008f6:	480d      	ldr	r0, [pc, #52]	; (800092c <clear_led+0x48>)
 80008f8:	f001 f913 	bl	8001b22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2140      	movs	r1, #64	; 0x40
 8000900:	480a      	ldr	r0, [pc, #40]	; (800092c <clear_led+0x48>)
 8000902:	f001 f90e 	bl	8001b22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	4808      	ldr	r0, [pc, #32]	; (800092c <clear_led+0x48>)
 800090c:	f001 f909 	bl	8001b22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <clear_led+0x48>)
 8000918:	f001 f903 	bl	8001b22 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000922:	4802      	ldr	r0, [pc, #8]	; (800092c <clear_led+0x48>)
 8000924:	f001 f8fd 	bl	8001b22 <HAL_GPIO_WritePin>
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40010800 	.word	0x40010800

08000930 <normal_fsm_run>:
#include "fsm.h"
#include "software_timer.h"
#include "button.h"
#include "display_LED.h"

void normal_fsm_run() {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	switch (status) {
 8000934:	4ba1      	ldr	r3, [pc, #644]	; (8000bbc <normal_fsm_run+0x28c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b06      	cmp	r3, #6
 800093a:	f200 81bd 	bhi.w	8000cb8 <normal_fsm_run+0x388>
 800093e:	a201      	add	r2, pc, #4	; (adr r2, 8000944 <normal_fsm_run+0x14>)
 8000940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000944:	08000961 	.word	0x08000961
 8000948:	08000cb9 	.word	0x08000cb9
 800094c:	08000cb9 	.word	0x08000cb9
 8000950:	08000cb9 	.word	0x08000cb9
 8000954:	080009a5 	.word	0x080009a5
 8000958:	08000be1 	.word	0x08000be1
 800095c:	08000ad9 	.word	0x08000ad9
	case INIT:
		counter=RED_TIME;
 8000960:	4b97      	ldr	r3, [pc, #604]	; (8000bc0 <normal_fsm_run+0x290>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a97      	ldr	r2, [pc, #604]	; (8000bc4 <normal_fsm_run+0x294>)
 8000966:	6013      	str	r3, [r2, #0]
		updateledbuffer(counter, 0);
 8000968:	4b96      	ldr	r3, [pc, #600]	; (8000bc4 <normal_fsm_run+0x294>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fea0 	bl	80006b4 <updateledbuffer>
		display_led(counter, 0, 250);
 8000974:	4b93      	ldr	r3, [pc, #588]	; (8000bc4 <normal_fsm_run+0x294>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	22fa      	movs	r2, #250	; 0xfa
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fed5 	bl	800072c <display_led>
		setTimer2(RED_TIME*1000);
 8000982:	4b8f      	ldr	r3, [pc, #572]	; (8000bc0 <normal_fsm_run+0x290>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800098a:	fb02 f303 	mul.w	r3, r2, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fc08 	bl	80011a4 <setTimer2>
		setTimer3(1000);
 8000994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000998:	f000 fc20 	bl	80011dc <setTimer3>
		status=RED;
 800099c:	4b87      	ldr	r3, [pc, #540]	; (8000bbc <normal_fsm_run+0x28c>)
 800099e:	2204      	movs	r2, #4
 80009a0:	601a      	str	r2, [r3, #0]
		break;
 80009a2:	e190      	b.n	8000cc6 <normal_fsm_run+0x396>
	case RED:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2110      	movs	r1, #16
 80009a8:	4887      	ldr	r0, [pc, #540]	; (8000bc8 <normal_fsm_run+0x298>)
 80009aa:	f001 f8ba 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2120      	movs	r1, #32
 80009b2:	4885      	ldr	r0, [pc, #532]	; (8000bc8 <normal_fsm_run+0x298>)
 80009b4:	f001 f8b5 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	4882      	ldr	r0, [pc, #520]	; (8000bc8 <normal_fsm_run+0x298>)
 80009be:	f001 f8b0 	bl	8001b22 <HAL_GPIO_WritePin>
		if (counter>AMBER_TIME) {
 80009c2:	4b80      	ldr	r3, [pc, #512]	; (8000bc4 <normal_fsm_run+0x294>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b81      	ldr	r3, [pc, #516]	; (8000bcc <normal_fsm_run+0x29c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dd26      	ble.n	8000a1c <normal_fsm_run+0xec>
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2180      	movs	r1, #128	; 0x80
 80009d2:	487d      	ldr	r0, [pc, #500]	; (8000bc8 <normal_fsm_run+0x298>)
 80009d4:	f001 f8a5 	bl	8001b22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009de:	487a      	ldr	r0, [pc, #488]	; (8000bc8 <normal_fsm_run+0x298>)
 80009e0:	f001 f89f 	bl	8001b22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ea:	4877      	ldr	r0, [pc, #476]	; (8000bc8 <normal_fsm_run+0x298>)
 80009ec:	f001 f899 	bl	8001b22 <HAL_GPIO_WritePin>
			updateledbuffer(counter, counter-AMBER_TIME);
 80009f0:	4b74      	ldr	r3, [pc, #464]	; (8000bc4 <normal_fsm_run+0x294>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	4b73      	ldr	r3, [pc, #460]	; (8000bc4 <normal_fsm_run+0x294>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	4b74      	ldr	r3, [pc, #464]	; (8000bcc <normal_fsm_run+0x29c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	4619      	mov	r1, r3
 8000a00:	f7ff fe58 	bl	80006b4 <updateledbuffer>
			display_led(counter, counter-AMBER_TIME, 250);
 8000a04:	4b6f      	ldr	r3, [pc, #444]	; (8000bc4 <normal_fsm_run+0x294>)
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	4b6e      	ldr	r3, [pc, #440]	; (8000bc4 <normal_fsm_run+0x294>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <normal_fsm_run+0x29c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	22fa      	movs	r2, #250	; 0xfa
 8000a14:	4619      	mov	r1, r3
 8000a16:	f7ff fe89 	bl	800072c <display_led>
 8000a1a:	e020      	b.n	8000a5e <normal_fsm_run+0x12e>
		}
		else {
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	4869      	ldr	r0, [pc, #420]	; (8000bc8 <normal_fsm_run+0x298>)
 8000a22:	f001 f87e 	bl	8001b22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2c:	4866      	ldr	r0, [pc, #408]	; (8000bc8 <normal_fsm_run+0x298>)
 8000a2e:	f001 f878 	bl	8001b22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a38:	4863      	ldr	r0, [pc, #396]	; (8000bc8 <normal_fsm_run+0x298>)
 8000a3a:	f001 f872 	bl	8001b22 <HAL_GPIO_WritePin>
			updateledbuffer(counter, counter);
 8000a3e:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <normal_fsm_run+0x294>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a60      	ldr	r2, [pc, #384]	; (8000bc4 <normal_fsm_run+0x294>)
 8000a44:	6812      	ldr	r2, [r2, #0]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe33 	bl	80006b4 <updateledbuffer>
			display_led(counter, counter, 250);
 8000a4e:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <normal_fsm_run+0x294>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a5c      	ldr	r2, [pc, #368]	; (8000bc4 <normal_fsm_run+0x294>)
 8000a54:	6811      	ldr	r1, [r2, #0]
 8000a56:	22fa      	movs	r2, #250	; 0xfa
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe67 	bl	800072c <display_led>
		}
		if (timer3_flag==1) {
 8000a5e:	4b5c      	ldr	r3, [pc, #368]	; (8000bd0 <normal_fsm_run+0x2a0>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d108      	bne.n	8000a78 <normal_fsm_run+0x148>
			counter--;
 8000a66:	4b57      	ldr	r3, [pc, #348]	; (8000bc4 <normal_fsm_run+0x294>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	4a55      	ldr	r2, [pc, #340]	; (8000bc4 <normal_fsm_run+0x294>)
 8000a6e:	6013      	str	r3, [r2, #0]
			setTimer3(1000);
 8000a70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a74:	f000 fbb2 	bl	80011dc <setTimer3>
		}
		if (timer2_flag==1) {
 8000a78:	4b56      	ldr	r3, [pc, #344]	; (8000bd4 <normal_fsm_run+0x2a4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d113      	bne.n	8000aa8 <normal_fsm_run+0x178>
			counter=GREEN_TIME;
 8000a80:	4b55      	ldr	r3, [pc, #340]	; (8000bd8 <normal_fsm_run+0x2a8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a4f      	ldr	r2, [pc, #316]	; (8000bc4 <normal_fsm_run+0x294>)
 8000a86:	6013      	str	r3, [r2, #0]
			status=GREEN;
 8000a88:	4b4c      	ldr	r3, [pc, #304]	; (8000bbc <normal_fsm_run+0x28c>)
 8000a8a:	2206      	movs	r2, #6
 8000a8c:	601a      	str	r2, [r3, #0]
			setTimer2(GREEN_TIME*1000);
 8000a8e:	4b52      	ldr	r3, [pc, #328]	; (8000bd8 <normal_fsm_run+0x2a8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a96:	fb02 f303 	mul.w	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fb82 	bl	80011a4 <setTimer2>
			setTimer3(1000);
 8000aa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa4:	f000 fb9a 	bl	80011dc <setTimer3>
		}
		if (button_SEL_flag==1) {
 8000aa8:	4b4c      	ldr	r3, [pc, #304]	; (8000bdc <normal_fsm_run+0x2ac>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	f040 8105 	bne.w	8000cbc <normal_fsm_run+0x38c>
			button_SEL_flag=0;
 8000ab2:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <normal_fsm_run+0x2ac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
			status=MOD_RED;
 8000ab8:	4b40      	ldr	r3, [pc, #256]	; (8000bbc <normal_fsm_run+0x28c>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
			setTimer2(0);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 fb70 	bl	80011a4 <setTimer2>
			setTimer3(0);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 fb89 	bl	80011dc <setTimer3>
			setTimer4(500);
 8000aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ace:	f000 fba1 	bl	8001214 <setTimer4>
			clear_led();
 8000ad2:	f7ff ff07 	bl	80008e4 <clear_led>
		}
		break;
 8000ad6:	e0f1      	b.n	8000cbc <normal_fsm_run+0x38c>
	case GREEN:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2110      	movs	r1, #16
 8000adc:	483a      	ldr	r0, [pc, #232]	; (8000bc8 <normal_fsm_run+0x298>)
 8000ade:	f001 f820 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4838      	ldr	r0, [pc, #224]	; (8000bc8 <normal_fsm_run+0x298>)
 8000ae8:	f001 f81b 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2140      	movs	r1, #64	; 0x40
 8000af0:	4835      	ldr	r0, [pc, #212]	; (8000bc8 <normal_fsm_run+0x298>)
 8000af2:	f001 f816 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000af6:	2201      	movs	r2, #1
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	4833      	ldr	r0, [pc, #204]	; (8000bc8 <normal_fsm_run+0x298>)
 8000afc:	f001 f811 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b06:	4830      	ldr	r0, [pc, #192]	; (8000bc8 <normal_fsm_run+0x298>)
 8000b08:	f001 f80b 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b12:	482d      	ldr	r0, [pc, #180]	; (8000bc8 <normal_fsm_run+0x298>)
 8000b14:	f001 f805 	bl	8001b22 <HAL_GPIO_WritePin>
		updateledbuffer(counter, counter+AMBER_TIME);
 8000b18:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <normal_fsm_run+0x294>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <normal_fsm_run+0x294>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <normal_fsm_run+0x29c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff fdc4 	bl	80006b4 <updateledbuffer>
		display_led(counter, counter+AMBER_TIME, 250);
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <normal_fsm_run+0x294>)
 8000b2e:	6818      	ldr	r0, [r3, #0]
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <normal_fsm_run+0x294>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <normal_fsm_run+0x29c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4413      	add	r3, r2
 8000b3a:	22fa      	movs	r2, #250	; 0xfa
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f7ff fdf5 	bl	800072c <display_led>
		if (timer3_flag==1) {
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <normal_fsm_run+0x2a0>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d108      	bne.n	8000b5c <normal_fsm_run+0x22c>
			counter--;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <normal_fsm_run+0x294>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <normal_fsm_run+0x294>)
 8000b52:	6013      	str	r3, [r2, #0]
			setTimer3(1000);
 8000b54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b58:	f000 fb40 	bl	80011dc <setTimer3>
		}
		if (timer2_flag==1) {
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <normal_fsm_run+0x2a4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d113      	bne.n	8000b8c <normal_fsm_run+0x25c>
			counter=AMBER_TIME;
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <normal_fsm_run+0x29c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a16      	ldr	r2, [pc, #88]	; (8000bc4 <normal_fsm_run+0x294>)
 8000b6a:	6013      	str	r3, [r2, #0]
			status=AMBER;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <normal_fsm_run+0x28c>)
 8000b6e:	2205      	movs	r2, #5
 8000b70:	601a      	str	r2, [r3, #0]
			setTimer2(AMBER_TIME*1000);
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <normal_fsm_run+0x29c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b7a:	fb02 f303 	mul.w	r3, r2, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fb10 	bl	80011a4 <setTimer2>
			setTimer3(1000);
 8000b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b88:	f000 fb28 	bl	80011dc <setTimer3>
		}
		if (button_SEL_flag==1) {
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <normal_fsm_run+0x2ac>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	f040 8095 	bne.w	8000cc0 <normal_fsm_run+0x390>
			button_SEL_flag=0;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <normal_fsm_run+0x2ac>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
			status=MOD_RED;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <normal_fsm_run+0x28c>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]
			setTimer2(0);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 fafe 	bl	80011a4 <setTimer2>
			setTimer3(0);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f000 fb17 	bl	80011dc <setTimer3>
			setTimer4(500);
 8000bae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb2:	f000 fb2f 	bl	8001214 <setTimer4>
			clear_led();
 8000bb6:	f7ff fe95 	bl	80008e4 <clear_led>
		}
		break;
 8000bba:	e081      	b.n	8000cc0 <normal_fsm_run+0x390>
 8000bbc:	20000080 	.word	0x20000080
 8000bc0:	20000040 	.word	0x20000040
 8000bc4:	200000c4 	.word	0x200000c4
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	20000044 	.word	0x20000044
 8000bd0:	2000008c 	.word	0x2000008c
 8000bd4:	20000088 	.word	0x20000088
 8000bd8:	20000048 	.word	0x20000048
 8000bdc:	20000074 	.word	0x20000074
	case AMBER:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2110      	movs	r1, #16
 8000be4:	4839      	ldr	r0, [pc, #228]	; (8000ccc <normal_fsm_run+0x39c>)
 8000be6:	f000 ff9c 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER1_GPIO_Port, AMBER1_Pin, SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2120      	movs	r1, #32
 8000bee:	4837      	ldr	r0, [pc, #220]	; (8000ccc <normal_fsm_run+0x39c>)
 8000bf0:	f000 ff97 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	4834      	ldr	r0, [pc, #208]	; (8000ccc <normal_fsm_run+0x39c>)
 8000bfa:	f000 ff92 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	4832      	ldr	r0, [pc, #200]	; (8000ccc <normal_fsm_run+0x39c>)
 8000c04:	f000 ff8d 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AMBER2_GPIO_Port, AMBER2_Pin, RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0e:	482f      	ldr	r0, [pc, #188]	; (8000ccc <normal_fsm_run+0x39c>)
 8000c10:	f000 ff87 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c1a:	482c      	ldr	r0, [pc, #176]	; (8000ccc <normal_fsm_run+0x39c>)
 8000c1c:	f000 ff81 	bl	8001b22 <HAL_GPIO_WritePin>
		updateledbuffer(counter, counter);
 8000c20:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <normal_fsm_run+0x3a0>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a2a      	ldr	r2, [pc, #168]	; (8000cd0 <normal_fsm_run+0x3a0>)
 8000c26:	6812      	ldr	r2, [r2, #0]
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fd42 	bl	80006b4 <updateledbuffer>
		display_led(counter, counter, 250);
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <normal_fsm_run+0x3a0>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <normal_fsm_run+0x3a0>)
 8000c36:	6811      	ldr	r1, [r2, #0]
 8000c38:	22fa      	movs	r2, #250	; 0xfa
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fd76 	bl	800072c <display_led>
		if (timer3_flag==1) {
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <normal_fsm_run+0x3a4>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d108      	bne.n	8000c5a <normal_fsm_run+0x32a>
			counter--;
 8000c48:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <normal_fsm_run+0x3a0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	3b01      	subs	r3, #1
 8000c4e:	4a20      	ldr	r2, [pc, #128]	; (8000cd0 <normal_fsm_run+0x3a0>)
 8000c50:	6013      	str	r3, [r2, #0]
			setTimer3(1000);
 8000c52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c56:	f000 fac1 	bl	80011dc <setTimer3>
		}
		if (timer2_flag==1) {
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <normal_fsm_run+0x3a8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d113      	bne.n	8000c8a <normal_fsm_run+0x35a>
			counter=RED_TIME;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <normal_fsm_run+0x3ac>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a1a      	ldr	r2, [pc, #104]	; (8000cd0 <normal_fsm_run+0x3a0>)
 8000c68:	6013      	str	r3, [r2, #0]
			status=RED;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <normal_fsm_run+0x3b0>)
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	601a      	str	r2, [r3, #0]
			setTimer2(RED_TIME*1000);
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <normal_fsm_run+0x3ac>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c78:	fb02 f303 	mul.w	r3, r2, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fa91 	bl	80011a4 <setTimer2>
			setTimer3(1000);
 8000c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c86:	f000 faa9 	bl	80011dc <setTimer3>
		}
		if (button_SEL_flag==1) {
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <normal_fsm_run+0x3b4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d118      	bne.n	8000cc4 <normal_fsm_run+0x394>
			button_SEL_flag=0;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <normal_fsm_run+0x3b4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
			status=MOD_RED;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <normal_fsm_run+0x3b0>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]
			setTimer2(0);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 fa80 	bl	80011a4 <setTimer2>
			setTimer3(0);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f000 fa99 	bl	80011dc <setTimer3>
			setTimer4(500);
 8000caa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cae:	f000 fab1 	bl	8001214 <setTimer4>
			clear_led();
 8000cb2:	f7ff fe17 	bl	80008e4 <clear_led>
		}
		break;
 8000cb6:	e005      	b.n	8000cc4 <normal_fsm_run+0x394>
	default:
		break;
 8000cb8:	bf00      	nop
 8000cba:	e004      	b.n	8000cc6 <normal_fsm_run+0x396>
		break;
 8000cbc:	bf00      	nop
 8000cbe:	e002      	b.n	8000cc6 <normal_fsm_run+0x396>
		break;
 8000cc0:	bf00      	nop
 8000cc2:	e000      	b.n	8000cc6 <normal_fsm_run+0x396>
		break;
 8000cc4:	bf00      	nop
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	200000c4 	.word	0x200000c4
 8000cd4:	2000008c 	.word	0x2000008c
 8000cd8:	20000088 	.word	0x20000088
 8000cdc:	20000040 	.word	0x20000040
 8000ce0:	20000080 	.word	0x20000080
 8000ce4:	20000074 	.word	0x20000074

08000ce8 <modify_fsm_run>:
void modify_fsm_run() {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	switch (status) {
 8000cec:	4b85      	ldr	r3, [pc, #532]	; (8000f04 <modify_fsm_run+0x21c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	f000 80ae 	beq.w	8000e52 <modify_fsm_run+0x16a>
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	f300 80fa 	bgt.w	8000ef0 <modify_fsm_run+0x208>
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d002      	beq.n	8000d06 <modify_fsm_run+0x1e>
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d053      	beq.n	8000dac <modify_fsm_run+0xc4>
			status=INIT;
			clear_led();
		}
		break;
	default:
		break;
 8000d04:	e0f4      	b.n	8000ef0 <modify_fsm_run+0x208>
		updateledbuffer(RED_TIME, 2);
 8000d06:	4b80      	ldr	r3, [pc, #512]	; (8000f08 <modify_fsm_run+0x220>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fcd1 	bl	80006b4 <updateledbuffer>
		display_led(RED_TIME, 2, 250);
 8000d12:	4b7d      	ldr	r3, [pc, #500]	; (8000f08 <modify_fsm_run+0x220>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	22fa      	movs	r2, #250	; 0xfa
 8000d18:	2102      	movs	r1, #2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fd06 	bl	800072c <display_led>
		if (timer4_flag==1) {
 8000d20:	4b7a      	ldr	r3, [pc, #488]	; (8000f0c <modify_fsm_run+0x224>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d10b      	bne.n	8000d40 <modify_fsm_run+0x58>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4879      	ldr	r0, [pc, #484]	; (8000f10 <modify_fsm_run+0x228>)
 8000d2c:	f000 ff11 	bl	8001b52 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED2_GPIO_Port, RED2_Pin);
 8000d30:	2180      	movs	r1, #128	; 0x80
 8000d32:	4877      	ldr	r0, [pc, #476]	; (8000f10 <modify_fsm_run+0x228>)
 8000d34:	f000 ff0d 	bl	8001b52 <HAL_GPIO_TogglePin>
			setTimer4(500);
 8000d38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d3c:	f000 fa6a 	bl	8001214 <setTimer4>
		if (button_MOD_flag==1) {
 8000d40:	4b74      	ldr	r3, [pc, #464]	; (8000f14 <modify_fsm_run+0x22c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d115      	bne.n	8000d74 <modify_fsm_run+0x8c>
			button_MOD_flag=0;
 8000d48:	4b72      	ldr	r3, [pc, #456]	; (8000f14 <modify_fsm_run+0x22c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
			RED_TIME++;
 8000d4e:	4b6e      	ldr	r3, [pc, #440]	; (8000f08 <modify_fsm_run+0x220>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	4a6c      	ldr	r2, [pc, #432]	; (8000f08 <modify_fsm_run+0x220>)
 8000d56:	6013      	str	r3, [r2, #0]
			if (RED_TIME>99) RED_TIME=1;
 8000d58:	4b6b      	ldr	r3, [pc, #428]	; (8000f08 <modify_fsm_run+0x220>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b63      	cmp	r3, #99	; 0x63
 8000d5e:	dd02      	ble.n	8000d66 <modify_fsm_run+0x7e>
 8000d60:	4b69      	ldr	r3, [pc, #420]	; (8000f08 <modify_fsm_run+0x220>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
			display_led(RED_TIME, 2, 250);
 8000d66:	4b68      	ldr	r3, [pc, #416]	; (8000f08 <modify_fsm_run+0x220>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	22fa      	movs	r2, #250	; 0xfa
 8000d6c:	2102      	movs	r1, #2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fcdc 	bl	800072c <display_led>
		if (button_SET_flag==1) {
 8000d74:	4b68      	ldr	r3, [pc, #416]	; (8000f18 <modify_fsm_run+0x230>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d105      	bne.n	8000d88 <modify_fsm_run+0xa0>
			button_SET_flag=0;
 8000d7c:	4b66      	ldr	r3, [pc, #408]	; (8000f18 <modify_fsm_run+0x230>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
			status=INIT;
 8000d82:	4b60      	ldr	r3, [pc, #384]	; (8000f04 <modify_fsm_run+0x21c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
		if (button_SEL_flag==1) {
 8000d88:	4b64      	ldr	r3, [pc, #400]	; (8000f1c <modify_fsm_run+0x234>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	f040 80b1 	bne.w	8000ef4 <modify_fsm_run+0x20c>
			button_SEL_flag=0;
 8000d92:	4b62      	ldr	r3, [pc, #392]	; (8000f1c <modify_fsm_run+0x234>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
			status=MOD_AMBER;
 8000d98:	4b5a      	ldr	r3, [pc, #360]	; (8000f04 <modify_fsm_run+0x21c>)
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	601a      	str	r2, [r3, #0]
			setTimer5(500);
 8000d9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000da2:	f000 fa53 	bl	800124c <setTimer5>
			clear_led();
 8000da6:	f7ff fd9d 	bl	80008e4 <clear_led>
		break;
 8000daa:	e0a3      	b.n	8000ef4 <modify_fsm_run+0x20c>
		updateledbuffer(AMBER_TIME, 3);
 8000dac:	4b5c      	ldr	r3, [pc, #368]	; (8000f20 <modify_fsm_run+0x238>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2103      	movs	r1, #3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fc7e 	bl	80006b4 <updateledbuffer>
		display_led(AMBER_TIME, 3, 250);
 8000db8:	4b59      	ldr	r3, [pc, #356]	; (8000f20 <modify_fsm_run+0x238>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	22fa      	movs	r2, #250	; 0xfa
 8000dbe:	2103      	movs	r1, #3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fcb3 	bl	800072c <display_led>
		if (timer5_flag==1) {
 8000dc6:	4b57      	ldr	r3, [pc, #348]	; (8000f24 <modify_fsm_run+0x23c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10c      	bne.n	8000de8 <modify_fsm_run+0x100>
			HAL_GPIO_TogglePin(AMBER1_GPIO_Port, AMBER1_Pin);
 8000dce:	2120      	movs	r1, #32
 8000dd0:	484f      	ldr	r0, [pc, #316]	; (8000f10 <modify_fsm_run+0x228>)
 8000dd2:	f000 febe 	bl	8001b52 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(AMBER2_GPIO_Port, AMBER2_Pin);
 8000dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dda:	484d      	ldr	r0, [pc, #308]	; (8000f10 <modify_fsm_run+0x228>)
 8000ddc:	f000 feb9 	bl	8001b52 <HAL_GPIO_TogglePin>
			setTimer5(500);
 8000de0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000de4:	f000 fa32 	bl	800124c <setTimer5>
		if (button_MOD_flag==1) {
 8000de8:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <modify_fsm_run+0x22c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d115      	bne.n	8000e1c <modify_fsm_run+0x134>
			button_MOD_flag=0;
 8000df0:	4b48      	ldr	r3, [pc, #288]	; (8000f14 <modify_fsm_run+0x22c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
			AMBER_TIME++;
 8000df6:	4b4a      	ldr	r3, [pc, #296]	; (8000f20 <modify_fsm_run+0x238>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a48      	ldr	r2, [pc, #288]	; (8000f20 <modify_fsm_run+0x238>)
 8000dfe:	6013      	str	r3, [r2, #0]
			if (AMBER_TIME>99) AMBER_TIME=1;
 8000e00:	4b47      	ldr	r3, [pc, #284]	; (8000f20 <modify_fsm_run+0x238>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b63      	cmp	r3, #99	; 0x63
 8000e06:	dd02      	ble.n	8000e0e <modify_fsm_run+0x126>
 8000e08:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <modify_fsm_run+0x238>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]
			display_led(AMBER_TIME, 3, 250);
 8000e0e:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <modify_fsm_run+0x238>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	22fa      	movs	r2, #250	; 0xfa
 8000e14:	2103      	movs	r1, #3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fc88 	bl	800072c <display_led>
		if (button_SET_flag==1) {
 8000e1c:	4b3e      	ldr	r3, [pc, #248]	; (8000f18 <modify_fsm_run+0x230>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d105      	bne.n	8000e30 <modify_fsm_run+0x148>
			button_SET_flag=0;
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <modify_fsm_run+0x230>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
			status=INIT;
 8000e2a:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <modify_fsm_run+0x21c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
		if (button_SEL_flag==1) {
 8000e30:	4b3a      	ldr	r3, [pc, #232]	; (8000f1c <modify_fsm_run+0x234>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d15f      	bne.n	8000ef8 <modify_fsm_run+0x210>
			button_SEL_flag=0;
 8000e38:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <modify_fsm_run+0x234>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
			status=MOD_GREEN;
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <modify_fsm_run+0x21c>)
 8000e40:	2203      	movs	r2, #3
 8000e42:	601a      	str	r2, [r3, #0]
			setTimer6(500);
 8000e44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e48:	f000 fa1c 	bl	8001284 <setTimer6>
			clear_led();
 8000e4c:	f7ff fd4a 	bl	80008e4 <clear_led>
		break;
 8000e50:	e052      	b.n	8000ef8 <modify_fsm_run+0x210>
		updateledbuffer(GREEN_TIME, 4);
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <modify_fsm_run+0x240>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2104      	movs	r1, #4
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fc2b 	bl	80006b4 <updateledbuffer>
		display_led(GREEN_TIME, 4, 250);
 8000e5e:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <modify_fsm_run+0x240>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	22fa      	movs	r2, #250	; 0xfa
 8000e64:	2104      	movs	r1, #4
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fc60 	bl	800072c <display_led>
		if (timer6_flag==1) {
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <modify_fsm_run+0x244>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d10c      	bne.n	8000e8e <modify_fsm_run+0x1a6>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 8000e74:	2140      	movs	r1, #64	; 0x40
 8000e76:	4826      	ldr	r0, [pc, #152]	; (8000f10 <modify_fsm_run+0x228>)
 8000e78:	f000 fe6b 	bl	8001b52 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN2_GPIO_Port, GREEN2_Pin);
 8000e7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e80:	4823      	ldr	r0, [pc, #140]	; (8000f10 <modify_fsm_run+0x228>)
 8000e82:	f000 fe66 	bl	8001b52 <HAL_GPIO_TogglePin>
			setTimer6(500);
 8000e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e8a:	f000 f9fb 	bl	8001284 <setTimer6>
		if (button_MOD_flag==1) {
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <modify_fsm_run+0x22c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d115      	bne.n	8000ec2 <modify_fsm_run+0x1da>
			button_MOD_flag=0;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <modify_fsm_run+0x22c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
			GREEN_TIME++;
 8000e9c:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <modify_fsm_run+0x240>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <modify_fsm_run+0x240>)
 8000ea4:	6013      	str	r3, [r2, #0]
			if (GREEN_TIME>99) GREEN_TIME=1;
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <modify_fsm_run+0x240>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b63      	cmp	r3, #99	; 0x63
 8000eac:	dd02      	ble.n	8000eb4 <modify_fsm_run+0x1cc>
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <modify_fsm_run+0x240>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]
			display_led(GREEN_TIME, 4, 250);
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <modify_fsm_run+0x240>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	22fa      	movs	r2, #250	; 0xfa
 8000eba:	2104      	movs	r1, #4
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fc35 	bl	800072c <display_led>
		if (button_SET_flag==1) {
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <modify_fsm_run+0x230>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d105      	bne.n	8000ed6 <modify_fsm_run+0x1ee>
			button_SET_flag=0;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <modify_fsm_run+0x230>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
			status=INIT;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <modify_fsm_run+0x21c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
		if (button_SEL_flag==1) {
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <modify_fsm_run+0x234>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10e      	bne.n	8000efc <modify_fsm_run+0x214>
			button_SEL_flag=0;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <modify_fsm_run+0x234>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
			status=INIT;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <modify_fsm_run+0x21c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
			clear_led();
 8000eea:	f7ff fcfb 	bl	80008e4 <clear_led>
		break;
 8000eee:	e005      	b.n	8000efc <modify_fsm_run+0x214>
		break;
 8000ef0:	bf00      	nop
 8000ef2:	e004      	b.n	8000efe <modify_fsm_run+0x216>
		break;
 8000ef4:	bf00      	nop
 8000ef6:	e002      	b.n	8000efe <modify_fsm_run+0x216>
		break;
 8000ef8:	bf00      	nop
 8000efa:	e000      	b.n	8000efe <modify_fsm_run+0x216>
		break;
 8000efc:	bf00      	nop
	}
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000080 	.word	0x20000080
 8000f08:	20000040 	.word	0x20000040
 8000f0c:	20000090 	.word	0x20000090
 8000f10:	40010800 	.word	0x40010800
 8000f14:	20000078 	.word	0x20000078
 8000f18:	2000007c 	.word	0x2000007c
 8000f1c:	20000074 	.word	0x20000074
 8000f20:	20000044 	.word	0x20000044
 8000f24:	20000094 	.word	0x20000094
 8000f28:	20000048 	.word	0x20000048
 8000f2c:	20000098 	.word	0x20000098

08000f30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f38:	f000 f9c0 	bl	80012bc <timerRun>
	getKeyInput();
 8000f3c:	f7ff f92e 	bl	800019c <getKeyInput>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4c:	f000 fae8 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f50:	f000 f80e 	bl	8000f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f54:	f000 f894 	bl	8001080 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f58:	f000 f846 	bl	8000fe8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <main+0x24>)
 8000f5e:	f001 fa49 	bl	80023f4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  normal_fsm_run();
 8000f62:	f7ff fce5 	bl	8000930 <normal_fsm_run>
	  modify_fsm_run();
 8000f66:	f7ff febf 	bl	8000ce8 <modify_fsm_run>
	  normal_fsm_run();
 8000f6a:	e7fa      	b.n	8000f62 <main+0x1a>
 8000f6c:	200000c8 	.word	0x200000c8

08000f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b090      	sub	sp, #64	; 0x40
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 0318 	add.w	r3, r7, #24
 8000f7a:	2228      	movs	r2, #40	; 0x28
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fdf0 	bl	8002b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f96:	2301      	movs	r3, #1
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0318 	add.w	r3, r7, #24
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fdec 	bl	8001b84 <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fb2:	f000 f8d5 	bl	8001160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 f858 	bl	8002084 <HAL_RCC_ClockConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fda:	f000 f8c1 	bl	8001160 <Error_Handler>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3740      	adds	r7, #64	; 0x40
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_TIM2_Init+0x94>)
 8001006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800100c:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_TIM2_Init+0x94>)
 800100e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001012:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_TIM2_Init+0x94>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_TIM2_Init+0x94>)
 800101c:	2209      	movs	r2, #9
 800101e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <MX_TIM2_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_TIM2_Init+0x94>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800102c:	4813      	ldr	r0, [pc, #76]	; (800107c <MX_TIM2_Init+0x94>)
 800102e:	f001 f991 	bl	8002354 <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001038:	f000 f892 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001040:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <MX_TIM2_Init+0x94>)
 800104a:	f001 fb27 	bl	800269c <HAL_TIM_ConfigClockSource>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001054:	f000 f884 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_TIM2_Init+0x94>)
 8001066:	f001 fcef 	bl	8002a48 <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001070:	f000 f876 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200000c8 	.word	0x200000c8

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001094:	4b2e      	ldr	r3, [pc, #184]	; (8001150 <MX_GPIO_Init+0xd0>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a2d      	ldr	r2, [pc, #180]	; (8001150 <MX_GPIO_Init+0xd0>)
 800109a:	f043 0310 	orr.w	r3, r3, #16
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b2b      	ldr	r3, [pc, #172]	; (8001150 <MX_GPIO_Init+0xd0>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b28      	ldr	r3, [pc, #160]	; (8001150 <MX_GPIO_Init+0xd0>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a27      	ldr	r2, [pc, #156]	; (8001150 <MX_GPIO_Init+0xd0>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <MX_GPIO_Init+0xd0>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_GPIO_Init+0xd0>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a21      	ldr	r2, [pc, #132]	; (8001150 <MX_GPIO_Init+0xd0>)
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_GPIO_Init+0xd0>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0308 	and.w	r3, r3, #8
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|AMBER1_Pin|GREEN1_Pin|RED2_Pin
 80010dc:	2200      	movs	r2, #0
 80010de:	f24f 31f0 	movw	r1, #62448	; 0xf3f0
 80010e2:	481c      	ldr	r0, [pc, #112]	; (8001154 <MX_GPIO_Init+0xd4>)
 80010e4:	f000 fd1d 	bl	8001b22 <HAL_GPIO_WritePin>
                          |AMBER2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80010e8:	2200      	movs	r2, #0
 80010ea:	217f      	movs	r1, #127	; 0x7f
 80010ec:	481a      	ldr	r0, [pc, #104]	; (8001158 <MX_GPIO_Init+0xd8>)
 80010ee:	f000 fd18 	bl	8001b22 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SELECT_Pin MOD_Pin SET_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin|MOD_Pin|SET_Pin;
 80010f2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	4815      	ldr	r0, [pc, #84]	; (800115c <MX_GPIO_Init+0xdc>)
 8001108:	f000 fb7a 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin AMBER1_Pin GREEN1_Pin RED2_Pin
                           AMBER2_Pin GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|AMBER1_Pin|GREEN1_Pin|RED2_Pin
 800110c:	f24f 33f0 	movw	r3, #62448	; 0xf3f0
 8001110:	613b      	str	r3, [r7, #16]
                          |AMBER2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2302      	movs	r3, #2
 800111c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4619      	mov	r1, r3
 8001124:	480b      	ldr	r0, [pc, #44]	; (8001154 <MX_GPIO_Init+0xd4>)
 8001126:	f000 fb6b 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 800112a:	237f      	movs	r3, #127	; 0x7f
 800112c:	613b      	str	r3, [r7, #16]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2302      	movs	r3, #2
 8001138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_GPIO_Init+0xd8>)
 8001142:	f000 fb5d 	bl	8001800 <HAL_GPIO_Init>

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00
 800115c:	40011000 	.word	0x40011000

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <setTimer1>:
int timer3_counter=0;
int timer4_counter=0;
int timer5_counter=0;
int timer6_counter=0;

void setTimer1(int duration) {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	timer1_counter=duration/TID;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <setTimer1+0x2c>)
 8001178:	fb82 1203 	smull	r1, r2, r2, r3
 800117c:	1092      	asrs	r2, r2, #2
 800117e:	17db      	asrs	r3, r3, #31
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	4a06      	ldr	r2, [pc, #24]	; (800119c <setTimer1+0x30>)
 8001184:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <setTimer1+0x34>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	66666667 	.word	0x66666667
 800119c:	2000009c 	.word	0x2000009c
 80011a0:	20000084 	.word	0x20000084

080011a4 <setTimer2>:
void setTimer2(int duration) {
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	timer2_counter=duration/TID;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <setTimer2+0x2c>)
 80011b0:	fb82 1203 	smull	r1, r2, r2, r3
 80011b4:	1092      	asrs	r2, r2, #2
 80011b6:	17db      	asrs	r3, r3, #31
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <setTimer2+0x30>)
 80011bc:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <setTimer2+0x34>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	66666667 	.word	0x66666667
 80011d4:	200000a0 	.word	0x200000a0
 80011d8:	20000088 	.word	0x20000088

080011dc <setTimer3>:
void setTimer3(int duration) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	timer3_counter=duration/TID;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <setTimer3+0x2c>)
 80011e8:	fb82 1203 	smull	r1, r2, r2, r3
 80011ec:	1092      	asrs	r2, r2, #2
 80011ee:	17db      	asrs	r3, r3, #31
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	4a06      	ldr	r2, [pc, #24]	; (800120c <setTimer3+0x30>)
 80011f4:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <setTimer3+0x34>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	66666667 	.word	0x66666667
 800120c:	200000a4 	.word	0x200000a4
 8001210:	2000008c 	.word	0x2000008c

08001214 <setTimer4>:
void setTimer4(int duration) {
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	timer4_counter=duration/TID;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <setTimer4+0x2c>)
 8001220:	fb82 1203 	smull	r1, r2, r2, r3
 8001224:	1092      	asrs	r2, r2, #2
 8001226:	17db      	asrs	r3, r3, #31
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	4a06      	ldr	r2, [pc, #24]	; (8001244 <setTimer4+0x30>)
 800122c:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <setTimer4+0x34>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	66666667 	.word	0x66666667
 8001244:	200000a8 	.word	0x200000a8
 8001248:	20000090 	.word	0x20000090

0800124c <setTimer5>:
void setTimer5(int duration) {
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	timer5_counter=duration/TID;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a08      	ldr	r2, [pc, #32]	; (8001278 <setTimer5+0x2c>)
 8001258:	fb82 1203 	smull	r1, r2, r2, r3
 800125c:	1092      	asrs	r2, r2, #2
 800125e:	17db      	asrs	r3, r3, #31
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	4a06      	ldr	r2, [pc, #24]	; (800127c <setTimer5+0x30>)
 8001264:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <setTimer5+0x34>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	66666667 	.word	0x66666667
 800127c:	200000ac 	.word	0x200000ac
 8001280:	20000094 	.word	0x20000094

08001284 <setTimer6>:
void setTimer6(int duration) {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	timer6_counter=duration/TID;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <setTimer6+0x2c>)
 8001290:	fb82 1203 	smull	r1, r2, r2, r3
 8001294:	1092      	asrs	r2, r2, #2
 8001296:	17db      	asrs	r3, r3, #31
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <setTimer6+0x30>)
 800129c:	6013      	str	r3, [r2, #0]
	timer6_flag=0;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <setTimer6+0x34>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	66666667 	.word	0x66666667
 80012b4:	200000b0 	.word	0x200000b0
 80012b8:	20000098 	.word	0x20000098

080012bc <timerRun>:
void timerRun() {
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	if (timer1_counter>0) {
 80012c0:	4b31      	ldr	r3, [pc, #196]	; (8001388 <timerRun+0xcc>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dd0b      	ble.n	80012e0 <timerRun+0x24>
		timer1_counter--;
 80012c8:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <timerRun+0xcc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	4a2e      	ldr	r2, [pc, #184]	; (8001388 <timerRun+0xcc>)
 80012d0:	6013      	str	r3, [r2, #0]
		if (timer1_counter<=0) {
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <timerRun+0xcc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	dc02      	bgt.n	80012e0 <timerRun+0x24>
			timer1_flag=1;
 80012da:	4b2c      	ldr	r3, [pc, #176]	; (800138c <timerRun+0xd0>)
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter>0) {
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <timerRun+0xd4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	dd0b      	ble.n	8001300 <timerRun+0x44>
		timer2_counter--;
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <timerRun+0xd4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <timerRun+0xd4>)
 80012f0:	6013      	str	r3, [r2, #0]
		if (timer2_counter<=0) {
 80012f2:	4b27      	ldr	r3, [pc, #156]	; (8001390 <timerRun+0xd4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dc02      	bgt.n	8001300 <timerRun+0x44>
			timer2_flag=1;
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <timerRun+0xd8>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter>0) {
 8001300:	4b25      	ldr	r3, [pc, #148]	; (8001398 <timerRun+0xdc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	dd0b      	ble.n	8001320 <timerRun+0x64>
		timer3_counter--;
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <timerRun+0xdc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3b01      	subs	r3, #1
 800130e:	4a22      	ldr	r2, [pc, #136]	; (8001398 <timerRun+0xdc>)
 8001310:	6013      	str	r3, [r2, #0]
		if (timer3_counter<=0) {
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <timerRun+0xdc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	dc02      	bgt.n	8001320 <timerRun+0x64>
			timer3_flag=1;
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <timerRun+0xe0>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter>0) {
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <timerRun+0xe4>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	dd0b      	ble.n	8001340 <timerRun+0x84>
		timer4_counter--;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <timerRun+0xe4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3b01      	subs	r3, #1
 800132e:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <timerRun+0xe4>)
 8001330:	6013      	str	r3, [r2, #0]
		if (timer4_counter<=0) {
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <timerRun+0xe4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	dc02      	bgt.n	8001340 <timerRun+0x84>
			timer4_flag=1;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <timerRun+0xe8>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter>0) {
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <timerRun+0xec>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	dd0b      	ble.n	8001360 <timerRun+0xa4>
		timer5_counter--;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <timerRun+0xec>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3b01      	subs	r3, #1
 800134e:	4a16      	ldr	r2, [pc, #88]	; (80013a8 <timerRun+0xec>)
 8001350:	6013      	str	r3, [r2, #0]
		if (timer5_counter<=0) {
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <timerRun+0xec>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	dc02      	bgt.n	8001360 <timerRun+0xa4>
			timer5_flag=1;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <timerRun+0xf0>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter>0) {
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <timerRun+0xf4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	dd0b      	ble.n	8001380 <timerRun+0xc4>
		timer6_counter--;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <timerRun+0xf4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <timerRun+0xf4>)
 8001370:	6013      	str	r3, [r2, #0]
		if (timer6_counter<=0) {
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <timerRun+0xf4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	dc02      	bgt.n	8001380 <timerRun+0xc4>
			timer6_flag=1;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <timerRun+0xf8>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	2000009c 	.word	0x2000009c
 800138c:	20000084 	.word	0x20000084
 8001390:	200000a0 	.word	0x200000a0
 8001394:	20000088 	.word	0x20000088
 8001398:	200000a4 	.word	0x200000a4
 800139c:	2000008c 	.word	0x2000008c
 80013a0:	200000a8 	.word	0x200000a8
 80013a4:	20000090 	.word	0x20000090
 80013a8:	200000ac 	.word	0x200000ac
 80013ac:	20000094 	.word	0x20000094
 80013b0:	200000b0 	.word	0x200000b0
 80013b4:	20000098 	.word	0x20000098

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_MspInit+0x5c>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_MspInit+0x5c>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_MspInit+0x5c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_MspInit+0x5c>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_MspInit+0x5c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_MspInit+0x5c>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_MspInit+0x60>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_MspInit+0x60>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40021000 	.word	0x40021000
 8001418:	40010000 	.word	0x40010000

0800141c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142c:	d113      	bne.n	8001456 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_TIM_Base_MspInit+0x44>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <HAL_TIM_Base_MspInit+0x44>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	61d3      	str	r3, [r2, #28]
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_TIM_Base_MspInit+0x44>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	201c      	movs	r0, #28
 800144c:	f000 f9a1 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001450:	201c      	movs	r0, #28
 8001452:	f000 f9ba 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <NMI_Handler+0x4>

0800146a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146e:	e7fe      	b.n	800146e <HardFault_Handler+0x4>

08001470 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <UsageFault_Handler+0x4>

08001482 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014aa:	f000 f87f 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <TIM2_IRQHandler+0x10>)
 80014ba:	f000 ffe7 	bl	800248c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200000c8 	.word	0x200000c8

080014c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	; (800150c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	; (8001518 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014fa:	f7ff ffe5 	bl	80014c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f001 fb0d 	bl	8002b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001502:	f7ff fd21 	bl	8000f48 <main>
  bx lr
 8001506:	4770      	bx	lr
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001510:	08002bb4 	.word	0x08002bb4
  ldr r2, =_sbss
 8001514:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001518:	20000114 	.word	0x20000114

0800151c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC1_2_IRQHandler>
	...

08001520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x28>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x28>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f923 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	200f      	movs	r0, #15
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff ff3c 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000

0800154c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f93b 	bl	80017e6 <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f000 f903 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	2000004c 	.word	0x2000004c
 80015a4:	20000054 	.word	0x20000054
 80015a8:	20000050 	.word	0x20000050

080015ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_IncTick+0x1c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_IncTick+0x20>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a03      	ldr	r2, [pc, #12]	; (80015cc <HAL_IncTick+0x20>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	20000054 	.word	0x20000054
 80015cc:	20000110 	.word	0x20000110

080015d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <HAL_GetTick+0x10>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	20000110 	.word	0x20000110

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800160c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	60d3      	str	r3, [r2, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	db0b      	blt.n	8001672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f003 021f 	and.w	r2, r3, #31
 8001660:	4906      	ldr	r1, [pc, #24]	; (800167c <__NVIC_EnableIRQ+0x34>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	095b      	lsrs	r3, r3, #5
 8001668:	2001      	movs	r0, #1
 800166a:	fa00 f202 	lsl.w	r2, r0, r2
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	; (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	; (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff90 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff2d 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff42 	bl	800162c <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff90 	bl	80016d4 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5f 	bl	8001680 <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff35 	bl	8001648 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa2 	bl	8001738 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b08b      	sub	sp, #44	; 0x2c
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	e148      	b.n	8001aa6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001814:	2201      	movs	r2, #1
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	429a      	cmp	r2, r3
 800182e:	f040 8137 	bne.w	8001aa0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4aa3      	ldr	r2, [pc, #652]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d05e      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 800183c:	4aa1      	ldr	r2, [pc, #644]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d875      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001842:	4aa1      	ldr	r2, [pc, #644]	; (8001ac8 <HAL_GPIO_Init+0x2c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d058      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001848:	4a9f      	ldr	r2, [pc, #636]	; (8001ac8 <HAL_GPIO_Init+0x2c8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d86f      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800184e:	4a9f      	ldr	r2, [pc, #636]	; (8001acc <HAL_GPIO_Init+0x2cc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d052      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001854:	4a9d      	ldr	r2, [pc, #628]	; (8001acc <HAL_GPIO_Init+0x2cc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d869      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800185a:	4a9d      	ldr	r2, [pc, #628]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d04c      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001860:	4a9b      	ldr	r2, [pc, #620]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d863      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001866:	4a9b      	ldr	r2, [pc, #620]	; (8001ad4 <HAL_GPIO_Init+0x2d4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d046      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 800186c:	4a99      	ldr	r2, [pc, #612]	; (8001ad4 <HAL_GPIO_Init+0x2d4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d85d      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001872:	2b12      	cmp	r3, #18
 8001874:	d82a      	bhi.n	80018cc <HAL_GPIO_Init+0xcc>
 8001876:	2b12      	cmp	r3, #18
 8001878:	d859      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800187a:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <HAL_GPIO_Init+0x80>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	080018fb 	.word	0x080018fb
 8001884:	080018d5 	.word	0x080018d5
 8001888:	080018e7 	.word	0x080018e7
 800188c:	08001929 	.word	0x08001929
 8001890:	0800192f 	.word	0x0800192f
 8001894:	0800192f 	.word	0x0800192f
 8001898:	0800192f 	.word	0x0800192f
 800189c:	0800192f 	.word	0x0800192f
 80018a0:	0800192f 	.word	0x0800192f
 80018a4:	0800192f 	.word	0x0800192f
 80018a8:	0800192f 	.word	0x0800192f
 80018ac:	0800192f 	.word	0x0800192f
 80018b0:	0800192f 	.word	0x0800192f
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	0800192f 	.word	0x0800192f
 80018bc:	0800192f 	.word	0x0800192f
 80018c0:	0800192f 	.word	0x0800192f
 80018c4:	080018dd 	.word	0x080018dd
 80018c8:	080018f1 	.word	0x080018f1
 80018cc:	4a82      	ldr	r2, [pc, #520]	; (8001ad8 <HAL_GPIO_Init+0x2d8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d2:	e02c      	b.n	800192e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e029      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	3304      	adds	r3, #4
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e024      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	3308      	adds	r3, #8
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e01f      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	330c      	adds	r3, #12
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e01a      	b.n	8001930 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001902:	2304      	movs	r3, #4
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e013      	b.n	8001930 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	611a      	str	r2, [r3, #16]
          break;
 800191a:	e009      	b.n	8001930 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	615a      	str	r2, [r3, #20]
          break;
 8001926:	e003      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x130>
          break;
 800192e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d801      	bhi.n	800193a <HAL_GPIO_Init+0x13a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	e001      	b.n	800193e <HAL_GPIO_Init+0x13e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3304      	adds	r3, #4
 800193e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2bff      	cmp	r3, #255	; 0xff
 8001944:	d802      	bhi.n	800194c <HAL_GPIO_Init+0x14c>
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x152>
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	3b08      	subs	r3, #8
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	210f      	movs	r1, #15
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	6a39      	ldr	r1, [r7, #32]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	431a      	orrs	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8090 	beq.w	8001aa0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001980:	4b56      	ldr	r3, [pc, #344]	; (8001adc <HAL_GPIO_Init+0x2dc>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a55      	ldr	r2, [pc, #340]	; (8001adc <HAL_GPIO_Init+0x2dc>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_GPIO_Init+0x2dc>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001998:	4a51      	ldr	r2, [pc, #324]	; (8001ae0 <HAL_GPIO_Init+0x2e0>)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a49      	ldr	r2, [pc, #292]	; (8001ae4 <HAL_GPIO_Init+0x2e4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00d      	beq.n	80019e0 <HAL_GPIO_Init+0x1e0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a48      	ldr	r2, [pc, #288]	; (8001ae8 <HAL_GPIO_Init+0x2e8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d007      	beq.n	80019dc <HAL_GPIO_Init+0x1dc>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a47      	ldr	r2, [pc, #284]	; (8001aec <HAL_GPIO_Init+0x2ec>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_GPIO_Init+0x1d8>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e004      	b.n	80019e2 <HAL_GPIO_Init+0x1e2>
 80019d8:	2303      	movs	r3, #3
 80019da:	e002      	b.n	80019e2 <HAL_GPIO_Init+0x1e2>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_GPIO_Init+0x1e2>
 80019e0:	2300      	movs	r3, #0
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	f002 0203 	and.w	r2, r2, #3
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	4093      	lsls	r3, r2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019f2:	493b      	ldr	r1, [pc, #236]	; (8001ae0 <HAL_GPIO_Init+0x2e0>)
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4937      	ldr	r1, [pc, #220]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a1a:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4933      	ldr	r1, [pc, #204]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a34:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	492d      	ldr	r1, [pc, #180]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a42:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	4929      	ldr	r1, [pc, #164]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	4923      	ldr	r1, [pc, #140]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	491f      	ldr	r1, [pc, #124]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	4919      	ldr	r1, [pc, #100]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60cb      	str	r3, [r1, #12]
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4915      	ldr	r1, [pc, #84]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f47f aeaf 	bne.w	8001814 <HAL_GPIO_Init+0x14>
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	372c      	adds	r7, #44	; 0x2c
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	10320000 	.word	0x10320000
 8001ac8:	10310000 	.word	0x10310000
 8001acc:	10220000 	.word	0x10220000
 8001ad0:	10210000 	.word	0x10210000
 8001ad4:	10120000 	.word	0x10120000
 8001ad8:	10110000 	.word	0x10110000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40010800 	.word	0x40010800
 8001ae8:	40010c00 	.word	0x40010c00
 8001aec:	40011000 	.word	0x40011000
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e001      	b.n	8001b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	807b      	strh	r3, [r7, #2]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b32:	787b      	ldrb	r3, [r7, #1]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b38:	887a      	ldrh	r2, [r7, #2]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b3e:	e003      	b.n	8001b48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	041a      	lsls	r2, r3, #16
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	611a      	str	r2, [r3, #16]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b085      	sub	sp, #20
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b64:	887a      	ldrh	r2, [r7, #2]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	041a      	lsls	r2, r3, #16
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	400b      	ands	r3, r1
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e26c      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8087 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ba4:	4b92      	ldr	r3, [pc, #584]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d00c      	beq.n	8001bca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bb0:	4b8f      	ldr	r3, [pc, #572]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d112      	bne.n	8001be2 <HAL_RCC_OscConfig+0x5e>
 8001bbc:	4b8c      	ldr	r3, [pc, #560]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc8:	d10b      	bne.n	8001be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bca:	4b89      	ldr	r3, [pc, #548]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d06c      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x12c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d168      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e246      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x76>
 8001bec:	4b80      	ldr	r3, [pc, #512]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a7f      	ldr	r2, [pc, #508]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e02e      	b.n	8001c58 <HAL_RCC_OscConfig+0xd4>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x98>
 8001c02:	4b7b      	ldr	r3, [pc, #492]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a7a      	ldr	r2, [pc, #488]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b78      	ldr	r3, [pc, #480]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a77      	ldr	r2, [pc, #476]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e01d      	b.n	8001c58 <HAL_RCC_OscConfig+0xd4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0xbc>
 8001c26:	4b72      	ldr	r3, [pc, #456]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a71      	ldr	r2, [pc, #452]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b6f      	ldr	r3, [pc, #444]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a6e      	ldr	r2, [pc, #440]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e00b      	b.n	8001c58 <HAL_RCC_OscConfig+0xd4>
 8001c40:	4b6b      	ldr	r3, [pc, #428]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a6a      	ldr	r2, [pc, #424]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a67      	ldr	r2, [pc, #412]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fcb6 	bl	80015d0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fcb2 	bl	80015d0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1fa      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0xe4>
 8001c86:	e014      	b.n	8001cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fca2 	bl	80015d0 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff fc9e 	bl	80015d0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e1e6      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x10c>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d063      	beq.n	8001d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cbe:	4b4c      	ldr	r3, [pc, #304]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cca:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d11c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x18c>
 8001cd6:	4b46      	ldr	r3, [pc, #280]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d116      	bne.n	8001d10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	4b43      	ldr	r3, [pc, #268]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_RCC_OscConfig+0x176>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e1ba      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4939      	ldr	r1, [pc, #228]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	e03a      	b.n	8001d86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d020      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d18:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7ff fc57 	bl	80015d0 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d26:	f7ff fc53 	bl	80015d0 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e19b      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4927      	ldr	r1, [pc, #156]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fc36 	bl	80015d0 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d68:	f7ff fc32 	bl	80015d0 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e17a      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d03a      	beq.n	8001e08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d019      	beq.n	8001dce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da0:	f7ff fc16 	bl	80015d0 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da8:	f7ff fc12 	bl	80015d0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e15a      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f000 faa6 	bl	8002318 <RCC_Delay>
 8001dcc:	e01c      	b.n	8001e08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fbfc 	bl	80015d0 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dda:	e00f      	b.n	8001dfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fbf8 	bl	80015d0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d908      	bls.n	8001dfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e140      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	42420000 	.word	0x42420000
 8001df8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	4b9e      	ldr	r3, [pc, #632]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1e9      	bne.n	8001ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a6 	beq.w	8001f62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1a:	4b97      	ldr	r3, [pc, #604]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10d      	bne.n	8001e42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b94      	ldr	r3, [pc, #592]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4a93      	ldr	r2, [pc, #588]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	61d3      	str	r3, [r2, #28]
 8001e32:	4b91      	ldr	r3, [pc, #580]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e42:	4b8e      	ldr	r3, [pc, #568]	; (800207c <HAL_RCC_OscConfig+0x4f8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d118      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4e:	4b8b      	ldr	r3, [pc, #556]	; (800207c <HAL_RCC_OscConfig+0x4f8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a8a      	ldr	r2, [pc, #552]	; (800207c <HAL_RCC_OscConfig+0x4f8>)
 8001e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fbb9 	bl	80015d0 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e62:	f7ff fbb5 	bl	80015d0 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b64      	cmp	r3, #100	; 0x64
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e0fd      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b81      	ldr	r3, [pc, #516]	; (800207c <HAL_RCC_OscConfig+0x4f8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x312>
 8001e88:	4b7b      	ldr	r3, [pc, #492]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a7a      	ldr	r2, [pc, #488]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	e02d      	b.n	8001ef2 <HAL_RCC_OscConfig+0x36e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x334>
 8001e9e:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a75      	ldr	r2, [pc, #468]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	6213      	str	r3, [r2, #32]
 8001eaa:	4b73      	ldr	r3, [pc, #460]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4a72      	ldr	r2, [pc, #456]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	6213      	str	r3, [r2, #32]
 8001eb6:	e01c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x36e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d10c      	bne.n	8001eda <HAL_RCC_OscConfig+0x356>
 8001ec0:	4b6d      	ldr	r3, [pc, #436]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a6c      	ldr	r2, [pc, #432]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a69      	ldr	r2, [pc, #420]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6213      	str	r3, [r2, #32]
 8001ed8:	e00b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x36e>
 8001eda:	4b67      	ldr	r3, [pc, #412]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a66      	ldr	r2, [pc, #408]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	4b64      	ldr	r3, [pc, #400]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a63      	ldr	r2, [pc, #396]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d015      	beq.n	8001f26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7ff fb69 	bl	80015d0 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff fb65 	bl	80015d0 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e0ab      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	4b57      	ldr	r3, [pc, #348]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0ee      	beq.n	8001f02 <HAL_RCC_OscConfig+0x37e>
 8001f24:	e014      	b.n	8001f50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fb53 	bl	80015d0 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff fb4f 	bl	80015d0 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e095      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	4b4c      	ldr	r3, [pc, #304]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ee      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d105      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f56:	4b48      	ldr	r3, [pc, #288]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a47      	ldr	r2, [pc, #284]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8081 	beq.w	800206e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f6c:	4b42      	ldr	r3, [pc, #264]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d061      	beq.n	800203c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d146      	bne.n	800200e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f80:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <HAL_RCC_OscConfig+0x4fc>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7ff fb23 	bl	80015d0 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7ff fb1f 	bl	80015d0 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e067      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa0:	4b35      	ldr	r3, [pc, #212]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb4:	d108      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	492d      	ldr	r1, [pc, #180]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a19      	ldr	r1, [r3, #32]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	4927      	ldr	r1, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <HAL_RCC_OscConfig+0x4fc>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff faf3 	bl	80015d0 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff faef 	bl	80015d0 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e037      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x46a>
 800200c:	e02f      	b.n	800206e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_RCC_OscConfig+0x4fc>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fadc 	bl	80015d0 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff fad8 	bl	80015d0 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e020      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x498>
 800203a:	e018      	b.n	800206e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e013      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	429a      	cmp	r2, r3
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	42420060 	.word	0x42420060

08002084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0d0      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002098:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d910      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 0207 	bic.w	r2, r3, #7
 80020ae:	4965      	ldr	r1, [pc, #404]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b63      	ldr	r3, [pc, #396]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b8      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	4b59      	ldr	r3, [pc, #356]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a58      	ldr	r2, [pc, #352]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f8:	4b53      	ldr	r3, [pc, #332]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a52      	ldr	r2, [pc, #328]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	494d      	ldr	r1, [pc, #308]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d040      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d115      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e07f      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e073      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e06b      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002162:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f023 0203 	bic.w	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4936      	ldr	r1, [pc, #216]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002174:	f7ff fa2c 	bl	80015d0 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	e00a      	b.n	8002192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217c:	f7ff fa28 	bl	80015d0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e053      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 020c 	and.w	r2, r3, #12
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1eb      	bne.n	800217c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d210      	bcs.n	80021d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4922      	ldr	r1, [pc, #136]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e032      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4916      	ldr	r1, [pc, #88]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	490e      	ldr	r1, [pc, #56]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002212:	f000 f821 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002216:	4602      	mov	r2, r0
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	490a      	ldr	r1, [pc, #40]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	5ccb      	ldrb	r3, [r1, r3]
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1cc>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1d0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff f98a 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40022000 	.word	0x40022000
 8002248:	40021000 	.word	0x40021000
 800224c:	08002b9c 	.word	0x08002b9c
 8002250:	2000004c 	.word	0x2000004c
 8002254:	20000050 	.word	0x20000050

08002258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	b490      	push	{r4, r7}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800225e:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002260:	1d3c      	adds	r4, r7, #4
 8002262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002268:	f240 2301 	movw	r3, #513	; 0x201
 800226c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b04      	cmp	r3, #4
 8002290:	d002      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x40>
 8002292:	2b08      	cmp	r3, #8
 8002294:	d003      	beq.n	800229e <HAL_RCC_GetSysClockFreq+0x46>
 8002296:	e02d      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCC_GetSysClockFreq+0xb8>)
 800229a:	623b      	str	r3, [r7, #32]
      break;
 800229c:	e02d      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	0c9b      	lsrs	r3, r3, #18
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022aa:	4413      	add	r3, r2
 80022ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022bc:	4b13      	ldr	r3, [pc, #76]	; (800230c <HAL_RCC_GetSysClockFreq+0xb4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	0c5b      	lsrs	r3, r3, #17
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022ca:	4413      	add	r3, r2
 80022cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022d6:	fb02 f203 	mul.w	r2, r2, r3
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	e004      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	623b      	str	r3, [r7, #32]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f6:	623b      	str	r3, [r7, #32]
      break;
 80022f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fa:	6a3b      	ldr	r3, [r7, #32]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3728      	adds	r7, #40	; 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bc90      	pop	{r4, r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	08002b8c 	.word	0x08002b8c
 800230c:	40021000 	.word	0x40021000
 8002310:	007a1200 	.word	0x007a1200
 8002314:	003d0900 	.word	0x003d0900

08002318 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <RCC_Delay+0x34>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <RCC_Delay+0x38>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0a5b      	lsrs	r3, r3, #9
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002334:	bf00      	nop
  }
  while (Delay --);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1e5a      	subs	r2, r3, #1
 800233a:	60fa      	str	r2, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f9      	bne.n	8002334 <RCC_Delay+0x1c>
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	2000004c 	.word	0x2000004c
 8002350:	10624dd3 	.word	0x10624dd3

08002354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e041      	b.n	80023ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff f84e 	bl	800141c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3304      	adds	r3, #4
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f000 fa6a 	bl	800286c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b01      	cmp	r3, #1
 8002406:	d001      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e035      	b.n	8002478 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a16      	ldr	r2, [pc, #88]	; (8002484 <HAL_TIM_Base_Start_IT+0x90>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d009      	beq.n	8002442 <HAL_TIM_Base_Start_IT+0x4e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002436:	d004      	beq.n	8002442 <HAL_TIM_Base_Start_IT+0x4e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a12      	ldr	r2, [pc, #72]	; (8002488 <HAL_TIM_Base_Start_IT+0x94>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d111      	bne.n	8002466 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b06      	cmp	r3, #6
 8002452:	d010      	beq.n	8002476 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002464:	e007      	b.n	8002476 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40012c00 	.word	0x40012c00
 8002488:	40000400 	.word	0x40000400

0800248c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d122      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d11b      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0202 	mvn.w	r2, #2
 80024b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f9b1 	bl	8002836 <HAL_TIM_IC_CaptureCallback>
 80024d4:	e005      	b.n	80024e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f9a4 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f9b3 	bl	8002848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d122      	bne.n	800253c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b04      	cmp	r3, #4
 8002502:	d11b      	bne.n	800253c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0204 	mvn.w	r2, #4
 800250c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2202      	movs	r2, #2
 8002512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f987 	bl	8002836 <HAL_TIM_IC_CaptureCallback>
 8002528:	e005      	b.n	8002536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f97a 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f989 	bl	8002848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b08      	cmp	r3, #8
 8002548:	d122      	bne.n	8002590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b08      	cmp	r3, #8
 8002556:	d11b      	bne.n	8002590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0208 	mvn.w	r2, #8
 8002560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2204      	movs	r2, #4
 8002566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f95d 	bl	8002836 <HAL_TIM_IC_CaptureCallback>
 800257c:	e005      	b.n	800258a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f950 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f95f 	bl	8002848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b10      	cmp	r3, #16
 800259c:	d122      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b10      	cmp	r3, #16
 80025aa:	d11b      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0210 	mvn.w	r2, #16
 80025b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2208      	movs	r2, #8
 80025ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f933 	bl	8002836 <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f926 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f935 	bl	8002848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d10e      	bne.n	8002610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d107      	bne.n	8002610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0201 	mvn.w	r2, #1
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fc90 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261a:	2b80      	cmp	r3, #128	; 0x80
 800261c:	d10e      	bne.n	800263c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002628:	2b80      	cmp	r3, #128	; 0x80
 800262a:	d107      	bne.n	800263c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fa67 	bl	8002b0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d10e      	bne.n	8002668 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d107      	bne.n	8002668 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f8f9 	bl	800285a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b20      	cmp	r3, #32
 8002674:	d10e      	bne.n	8002694 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b20      	cmp	r3, #32
 8002682:	d107      	bne.n	8002694 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0220 	mvn.w	r2, #32
 800268c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fa32 	bl	8002af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_TIM_ConfigClockSource+0x18>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e0b3      	b.n	800281c <HAL_TIM_ConfigClockSource+0x180>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ec:	d03e      	beq.n	800276c <HAL_TIM_ConfigClockSource+0xd0>
 80026ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f2:	f200 8087 	bhi.w	8002804 <HAL_TIM_ConfigClockSource+0x168>
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	f000 8085 	beq.w	8002808 <HAL_TIM_ConfigClockSource+0x16c>
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002702:	d87f      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x168>
 8002704:	2b70      	cmp	r3, #112	; 0x70
 8002706:	d01a      	beq.n	800273e <HAL_TIM_ConfigClockSource+0xa2>
 8002708:	2b70      	cmp	r3, #112	; 0x70
 800270a:	d87b      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x168>
 800270c:	2b60      	cmp	r3, #96	; 0x60
 800270e:	d050      	beq.n	80027b2 <HAL_TIM_ConfigClockSource+0x116>
 8002710:	2b60      	cmp	r3, #96	; 0x60
 8002712:	d877      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x168>
 8002714:	2b50      	cmp	r3, #80	; 0x50
 8002716:	d03c      	beq.n	8002792 <HAL_TIM_ConfigClockSource+0xf6>
 8002718:	2b50      	cmp	r3, #80	; 0x50
 800271a:	d873      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x168>
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d058      	beq.n	80027d2 <HAL_TIM_ConfigClockSource+0x136>
 8002720:	2b40      	cmp	r3, #64	; 0x40
 8002722:	d86f      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x168>
 8002724:	2b30      	cmp	r3, #48	; 0x30
 8002726:	d064      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x156>
 8002728:	2b30      	cmp	r3, #48	; 0x30
 800272a:	d86b      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x168>
 800272c:	2b20      	cmp	r3, #32
 800272e:	d060      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x156>
 8002730:	2b20      	cmp	r3, #32
 8002732:	d867      	bhi.n	8002804 <HAL_TIM_ConfigClockSource+0x168>
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05c      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x156>
 8002738:	2b10      	cmp	r3, #16
 800273a:	d05a      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800273c:	e062      	b.n	8002804 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6899      	ldr	r1, [r3, #8]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f000 f95c 	bl	8002a0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002760:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	609a      	str	r2, [r3, #8]
      break;
 800276a:	e04e      	b.n	800280a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f000 f945 	bl	8002a0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800278e:	609a      	str	r2, [r3, #8]
      break;
 8002790:	e03b      	b.n	800280a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6859      	ldr	r1, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	461a      	mov	r2, r3
 80027a0:	f000 f8bc 	bl	800291c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2150      	movs	r1, #80	; 0x50
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f913 	bl	80029d6 <TIM_ITRx_SetConfig>
      break;
 80027b0:	e02b      	b.n	800280a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6859      	ldr	r1, [r3, #4]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	461a      	mov	r2, r3
 80027c0:	f000 f8da 	bl	8002978 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2160      	movs	r1, #96	; 0x60
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f903 	bl	80029d6 <TIM_ITRx_SetConfig>
      break;
 80027d0:	e01b      	b.n	800280a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6859      	ldr	r1, [r3, #4]
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 f89c 	bl	800291c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2140      	movs	r1, #64	; 0x40
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 f8f3 	bl	80029d6 <TIM_ITRx_SetConfig>
      break;
 80027f0:	e00b      	b.n	800280a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f000 f8ea 	bl	80029d6 <TIM_ITRx_SetConfig>
        break;
 8002802:	e002      	b.n	800280a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002804:	bf00      	nop
 8002806:	e000      	b.n	800280a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002808:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a25      	ldr	r2, [pc, #148]	; (8002914 <TIM_Base_SetConfig+0xa8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <TIM_Base_SetConfig+0x28>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d003      	beq.n	8002894 <TIM_Base_SetConfig+0x28>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a22      	ldr	r2, [pc, #136]	; (8002918 <TIM_Base_SetConfig+0xac>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d108      	bne.n	80028a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a1a      	ldr	r2, [pc, #104]	; (8002914 <TIM_Base_SetConfig+0xa8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d007      	beq.n	80028be <TIM_Base_SetConfig+0x52>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b4:	d003      	beq.n	80028be <TIM_Base_SetConfig+0x52>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <TIM_Base_SetConfig+0xac>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d108      	bne.n	80028d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a07      	ldr	r2, [pc, #28]	; (8002914 <TIM_Base_SetConfig+0xa8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d103      	bne.n	8002904 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	615a      	str	r2, [r3, #20]
}
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40012c00 	.word	0x40012c00
 8002918:	40000400 	.word	0x40000400

0800291c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f023 0201 	bic.w	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f023 030a 	bic.w	r3, r3, #10
 8002958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	621a      	str	r2, [r3, #32]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f023 0210 	bic.w	r2, r3, #16
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	031b      	lsls	r3, r3, #12
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	621a      	str	r2, [r3, #32]
}
 80029cc:	bf00      	nop
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f043 0307 	orr.w	r3, r3, #7
 80029f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	609a      	str	r2, [r3, #8]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	021a      	lsls	r2, r3, #8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	609a      	str	r2, [r3, #8]
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e041      	b.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aac:	d004      	beq.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d10c      	bne.n	8002ad2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002abe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40012c00 	.word	0x40012c00
 8002af4:	40000400 	.word	0x40000400

08002af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <__libc_init_array>:
 8002b1c:	b570      	push	{r4, r5, r6, lr}
 8002b1e:	2600      	movs	r6, #0
 8002b20:	4d0c      	ldr	r5, [pc, #48]	; (8002b54 <__libc_init_array+0x38>)
 8002b22:	4c0d      	ldr	r4, [pc, #52]	; (8002b58 <__libc_init_array+0x3c>)
 8002b24:	1b64      	subs	r4, r4, r5
 8002b26:	10a4      	asrs	r4, r4, #2
 8002b28:	42a6      	cmp	r6, r4
 8002b2a:	d109      	bne.n	8002b40 <__libc_init_array+0x24>
 8002b2c:	f000 f822 	bl	8002b74 <_init>
 8002b30:	2600      	movs	r6, #0
 8002b32:	4d0a      	ldr	r5, [pc, #40]	; (8002b5c <__libc_init_array+0x40>)
 8002b34:	4c0a      	ldr	r4, [pc, #40]	; (8002b60 <__libc_init_array+0x44>)
 8002b36:	1b64      	subs	r4, r4, r5
 8002b38:	10a4      	asrs	r4, r4, #2
 8002b3a:	42a6      	cmp	r6, r4
 8002b3c:	d105      	bne.n	8002b4a <__libc_init_array+0x2e>
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
 8002b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b44:	4798      	blx	r3
 8002b46:	3601      	adds	r6, #1
 8002b48:	e7ee      	b.n	8002b28 <__libc_init_array+0xc>
 8002b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4e:	4798      	blx	r3
 8002b50:	3601      	adds	r6, #1
 8002b52:	e7f2      	b.n	8002b3a <__libc_init_array+0x1e>
 8002b54:	08002bac 	.word	0x08002bac
 8002b58:	08002bac 	.word	0x08002bac
 8002b5c:	08002bac 	.word	0x08002bac
 8002b60:	08002bb0 	.word	0x08002bb0

08002b64 <memset>:
 8002b64:	4603      	mov	r3, r0
 8002b66:	4402      	add	r2, r0
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d100      	bne.n	8002b6e <memset+0xa>
 8002b6c:	4770      	bx	lr
 8002b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b72:	e7f9      	b.n	8002b68 <memset+0x4>

08002b74 <_init>:
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	bf00      	nop
 8002b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7a:	bc08      	pop	{r3}
 8002b7c:	469e      	mov	lr, r3
 8002b7e:	4770      	bx	lr

08002b80 <_fini>:
 8002b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b82:	bf00      	nop
 8002b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b86:	bc08      	pop	{r3}
 8002b88:	469e      	mov	lr, r3
 8002b8a:	4770      	bx	lr
